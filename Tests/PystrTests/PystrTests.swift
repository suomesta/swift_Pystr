import XCTest
@testable import Pystr

final class PystrTests: XCTestCase {
    func test_add() {
        XCTAssertEqual(String("aa"), "a".py.add("a"))
        XCTAssertEqual(String("aAaa"), "aAa".py.add("a"))
        XCTAssertEqual(String("AAAa"), "AAA".py.add("a"))
        XCTAssertEqual(String("a"), "a".py.add(""))
        XCTAssertEqual(String("a"), "".py.add("a"))
        XCTAssertEqual(String(""), "".py.add(""))
    }

    func test_contains() {
        XCTAssertEqual(true, "a".py.contains("a"))
        XCTAssertEqual(true, "aAa".py.contains("a"))
        XCTAssertEqual(false, "AAA".py.contains("a"))
        XCTAssertEqual(true, "a".py.contains(""))
        XCTAssertEqual(false, "".py.contains("a"))
        XCTAssertEqual(true, "".py.contains(""))
    }

    func test_eq() {
        XCTAssertEqual(true, "a".py.eq("a"))
        XCTAssertEqual(false, "A".py.eq("a"))
        XCTAssertEqual(false, "AAA".py.eq("a"))
        XCTAssertEqual(false, "a".py.eq(""))
        XCTAssertEqual(false, "".py.eq("a"))
        XCTAssertEqual(true, "".py.eq(""))
    }

    func test_ge() {
        XCTAssertEqual(true, "a".py.ge("a"))
        XCTAssertEqual(false, "A".py.ge("a"))
        XCTAssertEqual(true, "a".py.ge("A"))
        XCTAssertEqual(false, "AAA".py.ge("a"))
        XCTAssertEqual(true, "a".py.ge(""))
        XCTAssertEqual(false, "".py.ge("a"))
        XCTAssertEqual(true, "".py.ge(""))
    }

    func test_getitem() {
        XCTAssertEqual(String("a"), try "abc".py.getitem(0))
        XCTAssertEqual(String("b"), try "abc".py.getitem(1))
        XCTAssertEqual(String("c"), try "abc".py.getitem(2))
        XCTAssertThrowsError(try "abc".py.getitem(3))
        XCTAssertEqual(String("a"), try "abc".py.getitem(-3))
        XCTAssertEqual(String("b"), try "abc".py.getitem(-2))
        XCTAssertEqual(String("c"), try "abc".py.getitem(-1))
        XCTAssertThrowsError(try "abc".py.getitem(10))
        XCTAssertThrowsError(try "abc".py.getitem(-10))
        XCTAssertThrowsError(try "".py.getitem(0))
        XCTAssertThrowsError(try "".py.getitem(1))
        XCTAssertThrowsError(try "".py.getitem(-1))
    }

    func test_slice() {
        XCTAssertEqual(String("abcdefgh"), try "abcdefgh".py.slice(nil, nil, nil))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(nil, 0))
        XCTAssertEqual(String("abcde"), try "abcdefgh".py.slice(nil, 5))
        XCTAssertEqual(String("abcdefgh"), try "abcdefgh".py.slice(0, nil, nil))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(1, 0))
        XCTAssertEqual(String("bcdefgh"), try "abcdefgh".py.slice(1, 100))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(100, 1))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(2, 2))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(200, 100))
        XCTAssertEqual(String("bcdefg"), try "abcdefgh".py.slice(1, -1))
        XCTAssertEqual(String("abcdefgh"), try "abcdefgh".py.slice(-100, 100))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(1, -100))
        XCTAssertEqual(String("abcdefgh"), try "abcdefgh".py.slice(0, nil))
        XCTAssertEqual(String("abcdefgh"), try "abcdefgh".py.slice(nil, nil))
        XCTAssertThrowsError(try "abcdefgh".py.slice(nil, nil, 0))
        XCTAssertEqual(String("aceg"), try "abcdefgh".py.slice(nil, nil, 2))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(1, 0, 2))
        XCTAssertEqual(String("bdfh"), try "abcdefgh".py.slice(1, 100, 2))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(100, 1, 2))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(2, 2, 2))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(200, 100, 2))
        XCTAssertEqual(String("bdf"), try "abcdefgh".py.slice(1, -1, 2))
        XCTAssertEqual(String("aceg"), try "abcdefgh".py.slice(-100, 100, 2))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(1, -100, 2))
        XCTAssertEqual(String("aceg"), try "abcdefgh".py.slice(0, nil, 2))
        XCTAssertEqual(String("hgfedcba"), try "abcdefgh".py.slice(nil, nil, -1))
        XCTAssertEqual(String("b"), try "abcdefgh".py.slice(1, 0, -1))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(1, 100, -1))
        XCTAssertEqual(String("hgfedc"), try "abcdefgh".py.slice(100, 1, -1))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(2, 2, -1))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(200, 100, -1))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(1, -1, -1))
        XCTAssertEqual(String(""), try "abcdefgh".py.slice(-100, 100, -1))
        XCTAssertEqual(String("ba"), try "abcdefgh".py.slice(1, -100, -1))
        XCTAssertEqual(String("a"), try "abcdefgh".py.slice(0, nil, -1))
        XCTAssertEqual(String("abcdefgh"), try "abcdefgh".py.slice(nil, nil, nil))
    }

    func test_gt() {
        XCTAssertEqual(false, "a".py.gt("a"))
        XCTAssertEqual(false, "A".py.gt("a"))
        XCTAssertEqual(true, "a".py.gt("A"))
        XCTAssertEqual(false, "AAA".py.gt("a"))
        XCTAssertEqual(true, "a".py.gt(""))
        XCTAssertEqual(false, "".py.gt("a"))
        XCTAssertEqual(false, "".py.gt(""))
    }

    func test_le() {
        XCTAssertEqual(true, "a".py.le("a"))
        XCTAssertEqual(true, "A".py.le("a"))
        XCTAssertEqual(false, "a".py.le("A"))
        XCTAssertEqual(true, "AAA".py.le("a"))
        XCTAssertEqual(false, "a".py.le(""))
        XCTAssertEqual(true, "".py.le("a"))
        XCTAssertEqual(true, "".py.le(""))
    }

    func test_len() {
        XCTAssertEqual(1, "a".py.len())
        XCTAssertEqual(3, "AAA".py.len())
        XCTAssertEqual(1, "„ÅÇ".py.len())
        XCTAssertEqual(2, "\r\n".py.len())
        XCTAssertEqual(2, "\n\r".py.len())
        XCTAssertEqual(0, "".py.len())
    }

    func test_lt() {
        XCTAssertEqual(false, "a".py.lt("a"))
        XCTAssertEqual(true, "A".py.lt("a"))
        XCTAssertEqual(false, "a".py.lt("A"))
        XCTAssertEqual(true, "AAA".py.lt("a"))
        XCTAssertEqual(false, "a".py.lt(""))
        XCTAssertEqual(true, "".py.lt("a"))
        XCTAssertEqual(false, "".py.lt(""))
    }

    func test_mul() {
        XCTAssertEqual(String("aaa"), "a".py.mul(3))
        XCTAssertEqual(String("abcabcabc"), "abc".py.mul(3))
        XCTAssertEqual(String(""), "".py.mul(10))
        XCTAssertEqual(String(""), "abc".py.mul(0))
        XCTAssertEqual(String(""), "abc".py.mul(-1))
    }

    func test_ne() {
        XCTAssertEqual(false, "a".py.ne("a"))
        XCTAssertEqual(true, "A".py.ne("a"))
        XCTAssertEqual(true, "AAA".py.ne("a"))
        XCTAssertEqual(true, "a".py.ne(""))
        XCTAssertEqual(true, "".py.ne("a"))
        XCTAssertEqual(false, "".py.ne(""))
    }

    func test_repr() {
        XCTAssertEqual(String("\"abc'abc\""), "abc'abc".py.repr())
        XCTAssertEqual(String("'abc\"\\'abc'"), "abc\"'abc".py.repr())
        XCTAssertEqual(String("'abc'"), "abc".py.repr())
        XCTAssertEqual(String("'a\\tbc'"), "a\tbc".py.repr())
        XCTAssertEqual(String("'\\r\\t\\n\\\\'"), "\r\t\n\\".py.repr())
        XCTAssertEqual(String("''"), "".py.repr())
    }

    func test_rmul() {
        XCTAssertEqual(String("aaa"), "a".py.rmul(3))
        XCTAssertEqual(String("abcabcabc"), "abc".py.rmul(3))
        XCTAssertEqual(String(""), "".py.rmul(10))
        XCTAssertEqual(String(""), "abc".py.rmul(0))
        XCTAssertEqual(String(""), "abc".py.rmul(-1))
    }

    func test_capitalize() {
        XCTAssertEqual(String("A"), "a".py.capitalize())
        XCTAssertEqual(String("A abc"), "a abc".py.capitalize())
        XCTAssertEqual(String("A abc"), "A ABC".py.capitalize())
        XCTAssertEqual(String("A abc"), "A Abc".py.capitalize())
        XCTAssertEqual(String("Abc"), "abc".py.capitalize())
        XCTAssertEqual(String("Abc"), "ABC".py.capitalize())
        XCTAssertEqual(String("Abc"), "Abc".py.capitalize())
        XCTAssertEqual(String("98"), "98".py.capitalize())
        XCTAssertEqual(String("%$"), "%$".py.capitalize())
        XCTAssertEqual(String(" "), " ".py.capitalize())
        XCTAssertEqual(String(""), "".py.capitalize())
    }

    func test_casefold() {
        XCTAssertEqual(String("a"), "a".py.casefold())
        XCTAssertEqual(String("ab"), "Ab".py.casefold())
        XCTAssertEqual(String("abc"), "abc".py.casefold())
        XCTAssertEqual(String("abc"), "aBc".py.casefold())
        XCTAssertEqual(String("a c"), "a c".py.casefold())
        XCTAssertEqual(String("3"), "3".py.casefold())
        XCTAssertEqual(String("3f"), "3F".py.casefold())
        XCTAssertEqual(String(""), "".py.casefold())
        XCTAssertEqual(String("@"), "@".py.casefold())
        XCTAssertEqual(String(" "), " ".py.casefold())
        XCTAssertEqual(String("3f@"), "3F@".py.casefold())
        XCTAssertEqual(String("\n"), "\n".py.casefold())
    }

    func test_center() {
        XCTAssertEqual(String("a"), try "a".py.center(1))
        XCTAssertEqual(String("a "), try "a".py.center(2))
        XCTAssertEqual(String(" a "), try "a".py.center(3))
        XCTAssertEqual(String(" a  "), try "a".py.center(4))
        XCTAssertEqual(String("aa"), try "aa".py.center(2))
        XCTAssertEqual(String(" aa"), try "aa".py.center(3))
        XCTAssertEqual(String(" aa "), try "aa".py.center(4))
        XCTAssertEqual(String("  aa "), try "aa".py.center(5))
        XCTAssertEqual(String("   A A   "), try "A A ".py.center(9))
        XCTAssertEqual(String("   A A    "), try "A A ".py.center(10))
        XCTAssertEqual(String("    A A    "), try "A A ".py.center(11))
        XCTAssertEqual(String("      A A      "), try "A A ".py.center(15))
        XCTAssertEqual(String("a"), try "a".py.center(0))
        XCTAssertEqual(String("a"), try "a".py.center(-1))
        XCTAssertEqual(String("a@"), try "a".py.center(2, "@"))
        XCTAssertEqual(String("@@@abc@@@@"), try "abc".py.center(10, "@"))
        XCTAssertThrowsError(try "a".py.center(1, "@@"))
        XCTAssertThrowsError(try "a".py.center(1, ""))
        XCTAssertEqual(String(""), try "".py.center(0))
        XCTAssertEqual(String(" "), try "".py.center(1))
        XCTAssertEqual(String("  "), try "".py.center(2))
        XCTAssertEqual(String(""), try "".py.center(0, "a"))
        XCTAssertEqual(String("a"), try "".py.center(1, "a"))
        XCTAssertEqual(String("aa"), try "".py.center(2, "a"))
    }

    func test_count() {
        XCTAssertEqual(1, "a".py.count("a"))
        XCTAssertEqual(1, "abc".py.count("a"))
        XCTAssertEqual(2, "abcab".py.count("ab"))
        XCTAssertEqual(2, "aaaaa".py.count("aa"))
        XCTAssertEqual(0, "".py.count("a"))
        XCTAssertEqual(2, "a".py.count(""))
        XCTAssertEqual(1, "".py.count(""))
        XCTAssertEqual(4, "abc".py.count(""))
        XCTAssertEqual(0, "abcab".py.count("a", 1, 3))
        XCTAssertEqual(1, "abcab".py.count("a", 1, 4))
        XCTAssertEqual(0, "abcab".py.count("ab", 1, 3))
        XCTAssertEqual(0, "abcab".py.count("ab", 1, 4))
        XCTAssertEqual(1, "abcab".py.count("a", 1))
        XCTAssertEqual(0, "abcab".py.count("a", 4))
        XCTAssertEqual(3, "abcab".py.count("", 1, 3))
        XCTAssertEqual(0, "abcab".py.count("ab", 999))
        XCTAssertEqual(1, "abcab".py.count("ab", 1, 999))
    }

    func test_endswith_single_prefix() {
        XCTAssertEqual(true, "a".py.endswith("a"))
        XCTAssertEqual(false, "abc".py.endswith("a"))
        XCTAssertEqual(true, "abc".py.endswith("c"))
        XCTAssertEqual(true, "abcab".py.endswith("ab"))
        XCTAssertEqual(false, "abcab".py.endswith("ac"))
        XCTAssertEqual(false, "".py.endswith("a"))
        XCTAssertEqual(true, "a".py.endswith(""))
        XCTAssertEqual(true, "".py.endswith(""))
        XCTAssertEqual(false, "abcab".py.endswith("a", 1, 3))
        XCTAssertEqual(true, "abcab".py.endswith("a", 1, 4))
        XCTAssertEqual(false, "abcab".py.endswith("ab", 1, 3))
        XCTAssertEqual(false, "abcab".py.endswith("ab", 1, 4))
        XCTAssertEqual(false, "abcab".py.endswith("a", 1))
        XCTAssertEqual(false, "abcab".py.endswith("a", 4))
        XCTAssertEqual(false, "abcab".py.endswith("a", 3, 1))
        XCTAssertEqual(true, "abcab".py.endswith("", 1, 3))
        XCTAssertEqual(false, "abc".py.endswith("a", -3, 0))
        XCTAssertEqual(false, "abc".py.endswith("a", -2, -1))
        XCTAssertEqual(true, "abc".py.endswith("b", -2, -1))
        XCTAssertEqual(true, "abcab".py.endswith("ab", 0, 999))
        XCTAssertEqual(false, "abcab".py.endswith("ab", 999))
    }

    func test_endswith_multiple_prefixes() {
        XCTAssertEqual(true, "a".py.endswith(["a"]))
        XCTAssertEqual(false, "abc".py.endswith(["a"]))
        XCTAssertEqual(true, "abc".py.endswith(["c"]))
        XCTAssertEqual(true, "abc".py.endswith(["b", "c"]))
        XCTAssertEqual(false, "abc".py.endswith(["b", "a"]))
        XCTAssertEqual(true, "abc".py.endswith(["ab", "bc", "abc"]))
        XCTAssertEqual(true, "abc".py.endswith(["bc", "ca", "cba"]))
        XCTAssertEqual(false, "".py.endswith(["a"]))
        XCTAssertEqual(true, "a".py.endswith([""]))
        XCTAssertEqual(true, "".py.endswith([""]))
        XCTAssertEqual(false, "a".py.endswith([]))
        XCTAssertEqual(false, "".py.endswith([]))
    }

    func test_expandtabs() {
        XCTAssertEqual(String("a"), "a".py.expandtabs())
        XCTAssertEqual(String("        "), "\t".py.expandtabs())
        XCTAssertEqual(String("a       "), "a\t".py.expandtabs())
        XCTAssertEqual(String("        a"), "\ta".py.expandtabs())
        XCTAssertEqual(String("        a       "), "\ta\t".py.expandtabs())
        XCTAssertEqual(String("        a       aa      aaa     "), "\ta\taa\taaa\t".py.expandtabs())
        XCTAssertEqual(String("                        "), "\t\t\t".py.expandtabs())
        XCTAssertEqual(String("        a  a    "), "\ta  a\t".py.expandtabs())
        XCTAssertEqual(String("        a\na       "), "\ta\na\t".py.expandtabs())
        XCTAssertEqual(String("a"), "a".py.expandtabs(4))
        XCTAssertEqual(String("a   "), "a\t".py.expandtabs(4))
        XCTAssertEqual(String("    a"), "\ta".py.expandtabs(4))
        XCTAssertEqual(String("    a   "), "\ta\t".py.expandtabs(4))
        XCTAssertEqual(String("            "), "\t\t\t".py.expandtabs(4))
        XCTAssertEqual(String("    a  a    "), "\ta  a\t".py.expandtabs(4))
        XCTAssertEqual(String("    a\na   "), "\ta\na\t".py.expandtabs(4))
        XCTAssertEqual(String("a "), "a\t".py.expandtabs(1))
        XCTAssertEqual(String("a"), "a\t".py.expandtabs(0))
        XCTAssertEqual(String("a"), "a\t".py.expandtabs(-1))
        XCTAssertEqual(String("aaaaaaaaa"), "aaaaaaaaa".py.expandtabs())
        XCTAssertEqual(String("aaaaaaaaa       "), "aaaaaaaaa\t".py.expandtabs())
        XCTAssertEqual(String("aaaaaaaa        "), "aaaaaaaa\t".py.expandtabs())
        XCTAssertEqual(String("aaaaaaaaa"), "aaaaaaaaa".py.expandtabs(1))
        XCTAssertEqual(String("aaaaaaaaa "), "aaaaaaaaa\t".py.expandtabs(1))
        XCTAssertEqual(String("aaaaaaaa "), "aaaaaaaa\t".py.expandtabs(1))
        XCTAssertEqual(String("aaaaaaaaa"), "aaaaaaaaa".py.expandtabs(2))
        XCTAssertEqual(String("aaaaaaaaa "), "aaaaaaaaa\t".py.expandtabs(2))
        XCTAssertEqual(String("aaaaaaaa  "), "aaaaaaaa\t".py.expandtabs(2))
        XCTAssertEqual(String("aaaaaaaaa"), "aaaaaaaaa".py.expandtabs(0))
        XCTAssertEqual(String("aaaaaaaaa"), "aaaaaaaaa\t".py.expandtabs(0))
        XCTAssertEqual(String("aaaaaaaa"), "aaaaaaaa\t".py.expandtabs(0))
        XCTAssertEqual(String(""), "".py.expandtabs())
        XCTAssertEqual(String(""), "".py.expandtabs(4))
        XCTAssertEqual(String(""), "".py.expandtabs(4))
        XCTAssertEqual(String(""), "".py.expandtabs(0))
        XCTAssertEqual(String(""), "".py.expandtabs(-1))
    }

    func test_find() {
        XCTAssertEqual(0, "abc".py.find("a"))
        XCTAssertEqual(-1, "abc".py.find("d"))
        XCTAssertEqual(1, "abc".py.find("bc"))
        XCTAssertEqual(-1, "abc".py.find("ac"))
        XCTAssertEqual(0, "abcabc".py.find("abc"))
        XCTAssertEqual(-1, "abcab".py.find("a", 1, 3))
        XCTAssertEqual(3, "abcab".py.find("a", 1, 4))
        XCTAssertEqual(-1, "abcab".py.find("ab", 1, 3))
        XCTAssertEqual(-1, "abcab".py.find("ab", 1, 4))
        XCTAssertEqual(-1, "abcab".py.find("a", 3, 1))
        XCTAssertEqual(3, "abcab".py.find("a", 1))
        XCTAssertEqual(-1, "abcab".py.find("a", 4))
        XCTAssertEqual(1, "abcab".py.find("", 1, 3))
        XCTAssertEqual(-1, "abcab".py.find("ab", 999))
        XCTAssertEqual(3, "abcab".py.find("ab", 1, 999))
        XCTAssertEqual(0, "abcab".py.find("ab", -999))
        XCTAssertEqual(-1, "abcab".py.find("ab", 0, -999))
        XCTAssertEqual(-1, "".py.find("a"))
        XCTAssertEqual(0, "a".py.find(""))
        XCTAssertEqual(0, "".py.find(""))
        XCTAssertEqual(2, "aaa".py.find("", 2))
        XCTAssertEqual(3, "aaa".py.find("", 3))
        XCTAssertEqual(-1, "aaa".py.find("", 4))
        XCTAssertEqual(0, "aaa".py.find("", -4))
        XCTAssertEqual(0, "aaa".py.find("", -3))
        XCTAssertEqual(1, "aaa".py.find("", -2))
        XCTAssertEqual(-1, "".py.find("", 999))
        XCTAssertEqual(0, "".py.find("", -999))
        XCTAssertEqual(-1, "".py.find("", 999, -999))
        XCTAssertEqual(0, "".py.find("", -999, 999))
    }

    func test_index() {
        XCTAssertEqual(0, try "abc".py.index("a"))
        XCTAssertThrowsError(try "abc".py.index("d"))
        XCTAssertEqual(1, try "abc".py.index("bc"))
        XCTAssertThrowsError(try "abc".py.index("ac"))
        XCTAssertEqual(0, try "abcabc".py.index("abc"))
        XCTAssertThrowsError(try "abcab".py.index("a", 1, 3))
        XCTAssertEqual(3, try "abcab".py.index("a", 1, 4))
        XCTAssertThrowsError(try "abcab".py.index("ab", 1, 3))
        XCTAssertThrowsError(try "abcab".py.index("ab", 1, 4))
        XCTAssertThrowsError(try "abcab".py.index("a", 3, 1))
        XCTAssertEqual(3, try "abcab".py.index("a", 1))
        XCTAssertThrowsError(try "abcab".py.index("a", 4))
        XCTAssertEqual(1, try "abcab".py.index("", 1, 3))
        XCTAssertThrowsError(try "abcab".py.index("ab", 999))
        XCTAssertEqual(3, try "abcab".py.index("ab", 1, 999))
        XCTAssertEqual(0, try "abcab".py.index("ab", -999))
        XCTAssertThrowsError(try "abcab".py.index("ab", 0, -999))
        XCTAssertThrowsError(try "".py.index("a"))
        XCTAssertEqual(0, try "a".py.index(""))
        XCTAssertEqual(0, try "".py.index(""))
        XCTAssertEqual(2, try "aaa".py.index("", 2))
        XCTAssertEqual(3, try "aaa".py.index("", 3))
        XCTAssertThrowsError(try "aaa".py.index("", 4))
        XCTAssertEqual(0, try "aaa".py.index("", -4))
        XCTAssertEqual(0, try "aaa".py.index("", -3))
        XCTAssertEqual(1, try "aaa".py.index("", -2))
        XCTAssertThrowsError(try "".py.index("", 999))
        XCTAssertEqual(0, try "".py.index("", -999))
        XCTAssertThrowsError(try "".py.index("", 999, -999))
        XCTAssertEqual(0, try "".py.index("", -999, 999))
    }

    func test_isalnum() {
        XCTAssertEqual(true, "a".py.isalnum())
        XCTAssertEqual(true, "A".py.isalnum())
        XCTAssertEqual(true, "abc".py.isalnum())
        XCTAssertEqual(true, "aBc".py.isalnum())
        XCTAssertEqual(false, "a c".py.isalnum())
        XCTAssertEqual(true, "3".py.isalnum())
        XCTAssertEqual(true, "3F".py.isalnum())
        XCTAssertEqual(false, "".py.isalnum())
        XCTAssertEqual(false, "@".py.isalnum())
        XCTAssertEqual(false, " ".py.isalnum())
        XCTAssertEqual(false, "3F@".py.isalnum())
        XCTAssertEqual(false, "\n".py.isalnum())
    }

    func test_isalpha() {
        XCTAssertEqual(true, "a".py.isalpha())
        XCTAssertEqual(true, "A".py.isalpha())
        XCTAssertEqual(true, "abc".py.isalpha())
        XCTAssertEqual(true, "aBc".py.isalpha())
        XCTAssertEqual(false, "a c".py.isalpha())
        XCTAssertEqual(false, "3".py.isalpha())
        XCTAssertEqual(false, "3F".py.isalpha())
        XCTAssertEqual(false, "".py.isalpha())
        XCTAssertEqual(false, "@".py.isalpha())
        XCTAssertEqual(false, " ".py.isalpha())
        XCTAssertEqual(false, "3F@".py.isalpha())
        XCTAssertEqual(false, "\n".py.isalpha())
    }

    func test_isascii() {
        XCTAssertEqual(true, "a".py.isascii())
        XCTAssertEqual(true, "A".py.isascii())
        XCTAssertEqual(true, "abc".py.isascii())
        XCTAssertEqual(true, "aBc".py.isascii())
        XCTAssertEqual(true, "a c".py.isascii())
        XCTAssertEqual(true, "3".py.isascii())
        XCTAssertEqual(true, "3F".py.isascii())
        XCTAssertEqual(true, "".py.isascii())
        XCTAssertEqual(true, "@".py.isascii())
        XCTAssertEqual(true, " ".py.isascii())
        XCTAssertEqual(true, "3F@".py.isascii())
        XCTAssertEqual(true, "\n".py.isascii())
        XCTAssertEqual(false, "„ÅÇ".py.isascii())
    }

    func test_isdecimal() {
        XCTAssertEqual(false, "a".py.isdecimal())
        XCTAssertEqual(false, "A".py.isdecimal())
        XCTAssertEqual(false, "abc".py.isdecimal())
        XCTAssertEqual(false, "aBc".py.isdecimal())
        XCTAssertEqual(false, "a c".py.isdecimal())
        XCTAssertEqual(true, "3".py.isdecimal())
        XCTAssertEqual(false, "3F".py.isdecimal())
        XCTAssertEqual(false, "".py.isdecimal())
        XCTAssertEqual(false, "@".py.isdecimal())
        XCTAssertEqual(false, " ".py.isdecimal())
        XCTAssertEqual(false, "3F@".py.isdecimal())
        XCTAssertEqual(false, "\n".py.isdecimal())
    }

    func test_isdigit() {
        XCTAssertEqual(false, "a".py.isdigit())
        XCTAssertEqual(false, "A".py.isdigit())
        XCTAssertEqual(false, "abc".py.isdigit())
        XCTAssertEqual(false, "aBc".py.isdigit())
        XCTAssertEqual(false, "a c".py.isdigit())
        XCTAssertEqual(true, "3".py.isdigit())
        XCTAssertEqual(false, "3F".py.isdigit())
        XCTAssertEqual(false, "".py.isdigit())
        XCTAssertEqual(false, "@".py.isdigit())
        XCTAssertEqual(false, " ".py.isdigit())
        XCTAssertEqual(false, "3F@".py.isdigit())
        XCTAssertEqual(false, "\n".py.isdigit())
    }

    func test_islower() {
        XCTAssertEqual(true, "a".py.islower())
        XCTAssertEqual(false, "A".py.islower())
        XCTAssertEqual(true, "abc".py.islower())
        XCTAssertEqual(false, "aBc".py.islower())
        XCTAssertEqual(true, "a c".py.islower())
        XCTAssertEqual(false, "3".py.islower())
        XCTAssertEqual(false, "3F".py.islower())
        XCTAssertEqual(true, "3f".py.islower())
        XCTAssertEqual(false, "".py.islower())
        XCTAssertEqual(false, "@".py.islower())
        XCTAssertEqual(false, " ".py.islower())
        XCTAssertEqual(false, "3F@".py.islower())
        XCTAssertEqual(false, "\n".py.islower())
    }

    func test_isnumeric() {
        XCTAssertEqual(false, "a".py.isnumeric())
        XCTAssertEqual(false, "A".py.isnumeric())
        XCTAssertEqual(false, "abc".py.isnumeric())
        XCTAssertEqual(false, "aBc".py.isnumeric())
        XCTAssertEqual(false, "a c".py.isnumeric())
        XCTAssertEqual(true, "3".py.isnumeric())
        XCTAssertEqual(false, "3F".py.isnumeric())
        XCTAssertEqual(false, "".py.isnumeric())
        XCTAssertEqual(false, "@".py.isnumeric())
        XCTAssertEqual(false, " ".py.isnumeric())
        XCTAssertEqual(false, "3F@".py.isnumeric())
        XCTAssertEqual(false, "\n".py.isnumeric())
    }

    func test_isprintable() {
        XCTAssertEqual(true, "a".py.isprintable())
        XCTAssertEqual(true, "A".py.isprintable())
        XCTAssertEqual(true, "abc".py.isprintable())
        XCTAssertEqual(true, "aBc".py.isprintable())
        XCTAssertEqual(true, "a c".py.isprintable())
        XCTAssertEqual(true, "3".py.isprintable())
        XCTAssertEqual(true, "3F".py.isprintable())
        XCTAssertEqual(true, "".py.isprintable())
        XCTAssertEqual(true, "@".py.isprintable())
        XCTAssertEqual(true, " ".py.isprintable())
        XCTAssertEqual(true, "3F@".py.isprintable())
        XCTAssertEqual(false, "\n".py.isprintable())
    }

    func test_isspace() {
        XCTAssertEqual(false, "a".py.isspace())
        XCTAssertEqual(false, "A".py.isspace())
        XCTAssertEqual(false, "abc".py.isspace())
        XCTAssertEqual(false, "aBc".py.isspace())
        XCTAssertEqual(false, "a c".py.isspace())
        XCTAssertEqual(false, "3".py.isspace())
        XCTAssertEqual(false, "3F".py.isspace())
        XCTAssertEqual(false, "".py.isspace())
        XCTAssertEqual(false, "@".py.isspace())
        XCTAssertEqual(true, " ".py.isspace())
        XCTAssertEqual(true, "  ".py.isspace())
        XCTAssertEqual(true, "   ".py.isspace())
        XCTAssertEqual(false, "3F@".py.isspace())
        XCTAssertEqual(true, "\n".py.isspace())
    }

    func test_istitle() {
        XCTAssertEqual(false, "a".py.istitle())
        XCTAssertEqual(false, "aaa".py.istitle())
        XCTAssertEqual(false, "aAa".py.istitle())
        XCTAssertEqual(true, "Aaa".py.istitle())
        XCTAssertEqual(false, "aAa AAA aaA".py.istitle())
        XCTAssertEqual(false, "AAa AAA AaA".py.istitle())
        XCTAssertEqual(true, "Aaa Bbb Ccc".py.istitle())
        XCTAssertEqual(false, "aAa\naaA".py.istitle())
        XCTAssertEqual(false, "aAa0aaA".py.istitle())
        XCTAssertEqual(false, "aAa-aaA".py.istitle())
        XCTAssertEqual(false, "aAa/aaA".py.istitle())
        XCTAssertEqual(false, "aAa'aaA".py.istitle())
        XCTAssertEqual(false, "AAa-AaA".py.istitle())
        XCTAssertEqual(true, "Aaa-Abc".py.istitle())
        XCTAssertEqual(false, " aA a ".py.istitle())
        XCTAssertEqual(true, " Aa A ".py.istitle())
        XCTAssertEqual(true, " Aa  ".py.istitle())
        XCTAssertEqual(true, "   Aaa Aaa".py.istitle())
        XCTAssertEqual(false, "   AaA Aaa".py.istitle())
        XCTAssertEqual(true, "Aaa @@@ Aaa".py.istitle())
        XCTAssertEqual(true, "Aaa @@@ Aaa@@@".py.istitle())
        XCTAssertEqual(true, "Aaa @@@@Aaa@@@".py.istitle())
        XCTAssertEqual(false, "".py.istitle())
    }

    func test_isupper() {
        XCTAssertEqual(false, "a".py.isupper())
        XCTAssertEqual(true, "A".py.isupper())
        XCTAssertEqual(false, "abc".py.isupper())
        XCTAssertEqual(false, "aBc".py.isupper())
        XCTAssertEqual(false, "a c".py.isupper())
        XCTAssertEqual(false, "3".py.isupper())
        XCTAssertEqual(true, "3F".py.isupper())
        XCTAssertEqual(false, "".py.isupper())
        XCTAssertEqual(false, "@".py.isupper())
        XCTAssertEqual(false, " ".py.isupper())
        XCTAssertEqual(true, "3F@".py.isupper())
        XCTAssertEqual(false, "\n".py.isupper())
    }

    func test_join() {
        XCTAssertEqual(String(""), "".py.join([]))
        XCTAssertEqual(String(""), "a".py.join([]))
        XCTAssertEqual(String("abc"), "".py.join(["a", "b", "c"]))
        XCTAssertEqual(String("aabac"), "a".py.join(["a", "b", "c"]))
        XCTAssertEqual(String("abbc"), "".py.join(["ab", "bc"]))
        XCTAssertEqual(String("ababc"), "a".py.join(["ab", "bc"]))
        XCTAssertEqual(String("abc"), "".py.join(["abc"]))
        XCTAssertEqual(String("abc"), "a".py.join(["abc"]))
    }

    func test_ljust() {
        XCTAssertEqual(String("a"), try "a".py.ljust(1))
        XCTAssertEqual(String("a "), try "a".py.ljust(2))
        XCTAssertEqual(String("a  "), try "a".py.ljust(3))
        XCTAssertEqual(String("a   "), try "a".py.ljust(4))
        XCTAssertEqual(String("aa"), try "aa".py.ljust(2))
        XCTAssertEqual(String("aa "), try "aa".py.ljust(3))
        XCTAssertEqual(String("aa  "), try "aa".py.ljust(4))
        XCTAssertEqual(String("aa   "), try "aa".py.ljust(5))
        XCTAssertEqual(String("A A      "), try "A A ".py.ljust(9))
        XCTAssertEqual(String("A A       "), try "A A ".py.ljust(10))
        XCTAssertEqual(String("A A        "), try "A A ".py.ljust(11))
        XCTAssertEqual(String("A A            "), try "A A ".py.ljust(15))
        XCTAssertEqual(String("a"), try "a".py.ljust(0))
        XCTAssertEqual(String("a"), try "a".py.ljust(-1))
        XCTAssertEqual(String("a@"), try "a".py.ljust(2, "@"))
        XCTAssertEqual(String("abc@@@@@@@"), try "abc".py.ljust(10, "@"))
        XCTAssertThrowsError(try "a".py.ljust(1, "@@"))
        XCTAssertThrowsError(try "a".py.ljust(1, ""))
        XCTAssertEqual(String(""), try "".py.ljust(0))
        XCTAssertEqual(String(" "), try "".py.ljust(1))
        XCTAssertEqual(String("  "), try "".py.ljust(2))
        XCTAssertEqual(String(""), try "".py.ljust(-1))
    }

    func test_lower() {
        XCTAssertEqual(String("a"), "a".py.lower())
        XCTAssertEqual(String("ab"), "Ab".py.lower())
        XCTAssertEqual(String("abc"), "abc".py.lower())
        XCTAssertEqual(String("abc"), "aBc".py.lower())
        XCTAssertEqual(String("a c"), "a c".py.lower())
        XCTAssertEqual(String("3"), "3".py.lower())
        XCTAssertEqual(String("3f"), "3F".py.lower())
        XCTAssertEqual(String(""), "".py.lower())
        XCTAssertEqual(String("@"), "@".py.lower())
        XCTAssertEqual(String(" "), " ".py.lower())
        XCTAssertEqual(String("3f@"), "3F@".py.lower())
        XCTAssertEqual(String("\n"), "\n".py.lower())
    }

    func test_lstrip() {
        XCTAssertEqual(String("ab ab"), "ab ab".py.lstrip())
        XCTAssertEqual(String("b ab"), "ab ab".py.lstrip("a"))
        XCTAssertEqual(String("ab ab"), "ab ab".py.lstrip("b"))
        XCTAssertEqual(String(" ab"), "ab ab".py.lstrip("ab"))
        XCTAssertEqual(String("b ab "), "ab ab ".py.lstrip("a"))
        XCTAssertEqual(String(" ab "), "ab ab ".py.lstrip("ab"))
        XCTAssertEqual(String(" ab "), "ab ab ".py.lstrip("ba"))
        XCTAssertEqual(String(" ab ab"), " ab ab".py.lstrip("a"))
        XCTAssertEqual(String(" ab ab"), " ab ab".py.lstrip("ab"))
        XCTAssertEqual(String(" ab ab"), " ab ab".py.lstrip("ba"))
        XCTAssertEqual(String("ab ab "), " ab ab ".py.lstrip())
        XCTAssertEqual(String("ab ab "), " ab ab ".py.lstrip(" "))
        XCTAssertEqual(String(" ab ab "), " ab ab ".py.lstrip(""))
        XCTAssertEqual(String(""), "a".py.lstrip("a"))
        XCTAssertEqual(String(""), "".py.lstrip("a"))
        XCTAssertEqual(String("a"), "a".py.lstrip(""))
        XCTAssertEqual(String(""), "".py.lstrip(""))
    }

    func test_partition() {
        XCTAssertEqual(["", "a", "bc"], try "abc".py.partition("a"))
        XCTAssertEqual(["a", "b", "c"], try "abc".py.partition("b"))
        XCTAssertEqual(["ab", "c", ""], try "abc".py.partition("c"))
        XCTAssertEqual(["abc", "", ""], try "abc".py.partition("d"))
        XCTAssertEqual(["", "a", "b ab "], try "ab ab ".py.partition("a"))
        XCTAssertEqual(["a", "b", " ab "], try "ab ab ".py.partition("b"))
        XCTAssertEqual(["", "ab", " ab "], try "ab ab ".py.partition("ab"))
        XCTAssertEqual(["ab ab ", "", ""], try "ab ab ".py.partition("ba"))
        XCTAssertEqual(["a", "b a", "b "], try "ab ab ".py.partition("b a"))
        XCTAssertEqual(["", " ", "ab ab "], try " ab ab ".py.partition(" "))
        XCTAssertThrowsError(try " ab ab ".py.partition(""))
        XCTAssertEqual(["", "", ""], try "".py.partition("a"))
        XCTAssertThrowsError(try "".py.partition(""))
    }

    func test_replace() {
        XCTAssertEqual(String("aac"), "abc".py.replace("b", "a"))
        XCTAssertEqual(String("abc"), "abc".py.replace("d", "a"))
        XCTAssertEqual(String("add"), "abc".py.replace("bc", "dd"))
        XCTAssertEqual(String("abc"), "abc".py.replace("cb", "dd"))
        XCTAssertEqual(String("ad"), "abc".py.replace("bc", "d"))
        XCTAssertEqual(String("abc"), "abc".py.replace("cb", "d"))
        XCTAssertEqual(String("ada"), "abca".py.replace("bc", "d"))
        XCTAssertEqual(String("aaabaca"), "abc".py.replace("", "a"))
        XCTAssertEqual(String("ac"), "abc".py.replace("b", ""))
        XCTAssertEqual(String("abc"), "abc".py.replace("", ""))
        XCTAssertEqual(String("a"), "".py.replace("", "a"))
        XCTAssertEqual(String(""), "".py.replace("b", ""))
        XCTAssertEqual(String(""), "".py.replace("", ""))
        XCTAssertEqual(String("addaddadd"), "abcabcabc".py.replace("bc", "dd", 4))
        XCTAssertEqual(String("addaddadd"), "abcabcabc".py.replace("bc", "dd", 3))
        XCTAssertEqual(String("addaddabc"), "abcabcabc".py.replace("bc", "dd", 2))
        XCTAssertEqual(String("addabcabc"), "abcabcabc".py.replace("bc", "dd", 1))
        XCTAssertEqual(String("abcabcabc"), "abcabcabc".py.replace("bc", "dd", 0))
        XCTAssertEqual(String("addaddadd"), "abcabcabc".py.replace("bc", "dd", -1))
        XCTAssertEqual(String("addaddadd"), "abcabcabc".py.replace("bc", "dd", -2))
    }

    func test_rfind() {
        XCTAssertEqual(0, "abc".py.rfind("a"))
        XCTAssertEqual(-1, "abc".py.rfind("d"))
        XCTAssertEqual(1, "abc".py.rfind("bc"))
        XCTAssertEqual(-1, "abc".py.rfind("ac"))
        XCTAssertEqual(3, "abcabc".py.rfind("abc"))
        XCTAssertEqual(6, "abcabc".py.rfind(""))
        XCTAssertEqual(-1, "abcab".py.rfind("a", 1, 3))
        XCTAssertEqual(3, "abcab".py.rfind("a", 1, 4))
        XCTAssertEqual(-1, "abcab".py.rfind("ab", 1, 3))
        XCTAssertEqual(-1, "abcab".py.rfind("ab", 1, 4))
        XCTAssertEqual(3, "abcab".py.rfind("a", 1))
        XCTAssertEqual(-1, "abcab".py.rfind("a", 4))
        XCTAssertEqual(3, "abcab".py.rfind("", 1, 3))
        XCTAssertEqual(-1, "abcab".py.rfind("ab", 999))
        XCTAssertEqual(3, "abcab".py.rfind("ab", 1, 999))
        XCTAssertEqual(-1, "".py.rfind("a"))
        XCTAssertEqual(1, "a".py.rfind(""))
        XCTAssertEqual(0, "".py.rfind(""))
    }

    func test_rindex() {
        XCTAssertEqual(0, try "abc".py.rindex("a"))
        XCTAssertThrowsError(try "abc".py.rindex("d"))
        XCTAssertEqual(1, try "abc".py.rindex("bc"))
        XCTAssertThrowsError(try "abc".py.rindex("ac"))
        XCTAssertEqual(3, try "abcabc".py.rindex("abc"))
        XCTAssertEqual(6, try "abcabc".py.rindex(""))
        XCTAssertThrowsError(try "abcab".py.rindex("a", 1, 3))
        XCTAssertEqual(3, try "abcab".py.rindex("a", 1, 4))
        XCTAssertThrowsError(try "abcab".py.rindex("ab", 1, 3))
        XCTAssertThrowsError(try "abcab".py.rindex("ab", 1, 4))
        XCTAssertEqual(3, try "abcab".py.rindex("a", 1))
        XCTAssertThrowsError(try "abcab".py.rindex("a", 4))
        XCTAssertEqual(3, try "abcab".py.rindex("", 1, 3))
        XCTAssertThrowsError(try "abcab".py.rindex("ab", 999))
        XCTAssertEqual(3, try "abcab".py.rindex("ab", 1, 999))
        XCTAssertThrowsError(try "".py.rindex("a"))
        XCTAssertEqual(1, try "a".py.rindex(""))
        XCTAssertEqual(0, try "".py.rindex(""))
    }

    func test_rjust() {
        XCTAssertEqual(String("a"), try "a".py.rjust(1))
        XCTAssertEqual(String(" a"), try "a".py.rjust(2))
        XCTAssertEqual(String("  a"), try "a".py.rjust(3))
        XCTAssertEqual(String("   a"), try "a".py.rjust(4))
        XCTAssertEqual(String("aa"), try "aa".py.rjust(2))
        XCTAssertEqual(String(" aa"), try "aa".py.rjust(3))
        XCTAssertEqual(String("  aa"), try "aa".py.rjust(4))
        XCTAssertEqual(String("   aa"), try "aa".py.rjust(5))
        XCTAssertEqual(String("     A A "), try "A A ".py.rjust(9))
        XCTAssertEqual(String("      A A "), try "A A ".py.rjust(10))
        XCTAssertEqual(String("       A A "), try "A A ".py.rjust(11))
        XCTAssertEqual(String("           A A "), try "A A ".py.rjust(15))
        XCTAssertEqual(String("a"), try "a".py.rjust(0))
        XCTAssertEqual(String("a"), try "a".py.rjust(-1))
        XCTAssertEqual(String("@a"), try "a".py.rjust(2, "@"))
        XCTAssertEqual(String("@@@@@@@abc"), try "abc".py.rjust(10, "@"))
        XCTAssertThrowsError(try "a".py.rjust(1, "@@"))
        XCTAssertThrowsError(try "a".py.rjust(1, ""))
        XCTAssertEqual(String(""), try "".py.rjust(0))
        XCTAssertEqual(String(" "), try "".py.rjust(1))
        XCTAssertEqual(String("  "), try "".py.rjust(2))
        XCTAssertEqual(String(""), try "".py.rjust(-1))
    }

    func test_rsplit() {
        XCTAssertEqual(["", "bc"], try "abc".py.rsplit("a"))
        XCTAssertEqual(["a", "c"], try "abc".py.rsplit("b"))
        XCTAssertEqual(["ab", ""], try "abc".py.rsplit("c"))
        XCTAssertEqual(["abc"], try "abc".py.rsplit("d"))
        XCTAssertEqual(["", "", "", ""], try "aaa".py.rsplit("a"))
        XCTAssertEqual(["", "b ", "b "], try "ab ab ".py.rsplit("a"))
        XCTAssertEqual(["a", " a", " "], try "ab ab ".py.rsplit("b"))
        XCTAssertEqual(["", " ", " "], try "ab ab ".py.rsplit("ab"))
        XCTAssertEqual(["ab ab "], try "ab ab ".py.rsplit("ba"))
        XCTAssertEqual(["a", "b "], try "ab ab ".py.rsplit("b a"))
        XCTAssertEqual(["", "", "bb  ", "", "bb  "], try "aabb  aabb  ".py.rsplit("a"))
        XCTAssertEqual(["aa", "", "  aa", "", "  "], try "aabb  aabb  ".py.rsplit("b"))
        XCTAssertEqual(["aabb", "", "aabb", "", ""], try "aabb  aabb  ".py.rsplit(" "))
        XCTAssertEqual(["aab", "abb  "], try "aabb  aabb  ".py.rsplit("b  a"))
        XCTAssertEqual(["", "ab", "ab", ""], try " ab ab ".py.rsplit(" "))
        XCTAssertThrowsError(try " ab ab ".py.rsplit(""))
        XCTAssertThrowsError(try "a".py.rsplit(""))
        XCTAssertEqual([""], try "".py.rsplit("a"))
        XCTAssertThrowsError(try "".py.rsplit(""))
        XCTAssertEqual(["", "bc"], try "abc".py.rsplit("a", 1))
        XCTAssertEqual(["a", "c"], try "abc".py.rsplit("b", 1))
        XCTAssertEqual(["ab", ""], try "abc".py.rsplit("c", 1))
        XCTAssertEqual(["abc"], try "abc".py.rsplit("d", 1))
        XCTAssertEqual(["ab ", "b "], try "ab ab ".py.rsplit("a", 1))
        XCTAssertEqual(["ab a", " "], try "ab ab ".py.rsplit("b", 1))
        XCTAssertEqual(["ab ", " "], try "ab ab ".py.rsplit("ab", 1))
        XCTAssertEqual(["ab ab "], try "ab ab ".py.rsplit("ba", 1))
        XCTAssertEqual(["a", "b "], try "ab ab ".py.rsplit("b a", 1))
        XCTAssertEqual(["aabb  a", "bb  "], try "aabb  aabb  ".py.rsplit("a", 1))
        XCTAssertEqual(["aabb  aab", "  "], try "aabb  aabb  ".py.rsplit("b", 1))
        XCTAssertEqual(["aabb  aabb ", ""], try "aabb  aabb  ".py.rsplit(" ", 1))
        XCTAssertEqual(["aab", "abb  "], try "aabb  aabb  ".py.rsplit("b  a", 1))
        XCTAssertEqual([" ab ab", ""], try " ab ab ".py.rsplit(" ", 1))
        XCTAssertThrowsError(try " ab ab ".py.rsplit("", 1))
        XCTAssertThrowsError(try "a".py.rsplit("", 1))
        XCTAssertEqual([""], try "".py.rsplit("a", 1))
        XCTAssertThrowsError(try "".py.rsplit("", 1))
        XCTAssertEqual(["", "bc"], try "abc".py.rsplit("a", 2))
        XCTAssertEqual(["a", "c"], try "abc".py.rsplit("b", 2))
        XCTAssertEqual(["ab", ""], try "abc".py.rsplit("c", 2))
        XCTAssertEqual(["abc"], try "abc".py.rsplit("d", 2))
        XCTAssertEqual(["", "b ", "b "], try "ab ab ".py.rsplit("a", 2))
        XCTAssertEqual(["a", " a", " "], try "ab ab ".py.rsplit("b", 2))
        XCTAssertEqual(["", " ", " "], try "ab ab ".py.rsplit("ab", 2))
        XCTAssertEqual(["ab ab "], try "ab ab ".py.rsplit("ba", 2))
        XCTAssertEqual(["a", "b "], try "ab ab ".py.rsplit("b a", 2))
        XCTAssertEqual(["aabb  ", "", "bb  "], try "aabb  aabb  ".py.rsplit("a", 2))
        XCTAssertEqual(["aabb  aa", "", "  "], try "aabb  aabb  ".py.rsplit("b", 2))
        XCTAssertEqual(["aabb  aabb", "", ""], try "aabb  aabb  ".py.rsplit(" ", 2))
        XCTAssertEqual(["aab", "abb  "], try "aabb  aabb  ".py.rsplit("b  a", 2))
        XCTAssertEqual([" ab", "ab", ""], try " ab ab ".py.rsplit(" ", 2))
        XCTAssertThrowsError(try " ab ab ".py.rsplit("", 2))
        XCTAssertThrowsError(try "a".py.rsplit("", 2))
        XCTAssertEqual([""], try "".py.rsplit("a", 2))
        XCTAssertThrowsError(try "".py.rsplit("", 2))
        XCTAssertEqual(["a", "c"], try "abc".py.rsplit("b", 10))
        XCTAssertEqual(["abc"], try "abc".py.rsplit("b", 0))
        XCTAssertEqual(["a", "c"], try "abc".py.rsplit("b", -1))
        XCTAssertEqual(["a", "c"], try "abc".py.rsplit("b", -10000))
        XCTAssertEqual(["abc"], try "abc".py.rsplit())
        XCTAssertEqual(["ab", "ab"], try "ab ab ".py.rsplit())
        XCTAssertEqual(["ab", "ab"], try " ab ab ".py.rsplit())
        XCTAssertEqual(["aabb", "aabb"], try "aabb  aabb  ".py.rsplit())
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc".py.rsplit())
        XCTAssertEqual(["a", "bb", "ccc"], try " a bb  ccc".py.rsplit())
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc   ".py.rsplit())
        XCTAssertEqual(["a", "bb", "ccc"], try " a bb  ccc   ".py.rsplit())
        XCTAssertEqual(["a"], try "a".py.rsplit())
        XCTAssertEqual([], try "".py.rsplit())
        XCTAssertEqual(["abc"], try "abc".py.rsplit(nil, 1))
        XCTAssertEqual(["ab", "ab"], try "ab ab ".py.rsplit(nil, 1))
        XCTAssertEqual([" ab", "ab"], try " ab ab ".py.rsplit(nil, 1))
        XCTAssertEqual(["aabb", "aabb"], try "aabb  aabb  ".py.rsplit(nil, 1))
        XCTAssertEqual(["a bb", "ccc"], try "a bb  ccc".py.rsplit(nil, 1))
        XCTAssertEqual([" a bb", "ccc"], try " a bb  ccc".py.rsplit(nil, 1))
        XCTAssertEqual(["a bb", "ccc"], try "a bb  ccc   ".py.rsplit(nil, 1))
        XCTAssertEqual([" a bb", "ccc"], try " a bb  ccc   ".py.rsplit(nil, 1))
        XCTAssertEqual(["a"], try "a".py.rsplit(nil, 1))
        XCTAssertEqual([], try "".py.rsplit(nil, 1))
        XCTAssertEqual(["abc"], try "abc".py.rsplit(nil, 2))
        XCTAssertEqual(["ab", "ab"], try "ab ab ".py.rsplit(nil, 2))
        XCTAssertEqual(["ab", "ab"], try " ab ab ".py.rsplit(nil, 2))
        XCTAssertEqual(["aabb", "aabb"], try "aabb  aabb  ".py.rsplit(nil, 2))
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc".py.rsplit(nil, 2))
        XCTAssertEqual([" a", "bb", "ccc"], try " a bb  ccc".py.rsplit(nil, 2))
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc   ".py.rsplit(nil, 2))
        XCTAssertEqual([" a", "bb", "ccc"], try " a bb  ccc   ".py.rsplit(nil, 2))
        XCTAssertEqual(["a"], try "a".py.rsplit(nil, 2))
        XCTAssertEqual([], try "".py.rsplit(nil, 2))
    }

    func test_rpartition() {
        XCTAssertEqual(["", "a", "bc"], try "abc".py.rpartition("a"))
        XCTAssertEqual(["a", "b", "c"], try "abc".py.rpartition("b"))
        XCTAssertEqual(["ab", "c", ""], try "abc".py.rpartition("c"))
        XCTAssertEqual(["", "", "abc"], try "abc".py.rpartition("d"))
        XCTAssertEqual(["ab ", "a", "b "], try "ab ab ".py.rpartition("a"))
        XCTAssertEqual(["ab a", "b", " "], try "ab ab ".py.rpartition("b"))
        XCTAssertEqual(["ab ", "ab", " "], try "ab ab ".py.rpartition("ab"))
        XCTAssertEqual(["", "", "ab ab "], try "ab ab ".py.rpartition("ba"))
        XCTAssertEqual(["a", "b a", "b "], try "ab ab ".py.rpartition("b a"))
        XCTAssertEqual([" ab ab", " ", ""], try " ab ab ".py.rpartition(" "))
        XCTAssertThrowsError(try " ab ab ".py.rpartition(""))
        XCTAssertThrowsError(try "a".py.rpartition(""))
        XCTAssertEqual(["", "", ""], try "".py.rpartition("a"))
        XCTAssertThrowsError(try "".py.rpartition(""))
    }

    func test_rstrip() {
        XCTAssertEqual(String("ab ab"), "ab ab".py.rstrip())
        XCTAssertEqual(String("ab ab"), "ab ab".py.rstrip("a"))
        XCTAssertEqual(String("ab a"), "ab ab".py.rstrip("b"))
        XCTAssertEqual(String("ab "), "ab ab".py.rstrip("ab"))
        XCTAssertEqual(String("ab ab "), "ab ab ".py.rstrip("a"))
        XCTAssertEqual(String("ab ab "), "ab ab ".py.rstrip("ab"))
        XCTAssertEqual(String("ab ab "), "ab ab ".py.rstrip("ba"))
        XCTAssertEqual(String(" ab ab"), " ab ab".py.rstrip("a"))
        XCTAssertEqual(String(" ab "), " ab ab".py.rstrip("ab"))
        XCTAssertEqual(String(" ab "), " ab ab".py.rstrip("ba"))
        XCTAssertEqual(String(" ab ab"), " ab ab ".py.rstrip())
        XCTAssertEqual(String(" ab ab"), " ab ab ".py.rstrip(" "))
        XCTAssertEqual(String(" ab ab "), " ab ab ".py.rstrip(""))
        XCTAssertEqual(String(""), "a".py.rstrip("a"))
        XCTAssertEqual(String(""), "".py.rstrip("a"))
        XCTAssertEqual(String("a"), "a".py.rstrip(""))
        XCTAssertEqual(String(""), "".py.rstrip(""))
    }

    func test_split() {
        XCTAssertEqual(["", "bc"], try "abc".py.split("a"))
        XCTAssertEqual(["a", "c"], try "abc".py.split("b"))
        XCTAssertEqual(["ab", ""], try "abc".py.split("c"))
        XCTAssertEqual(["abc"], try "abc".py.split("d"))
        XCTAssertEqual(["", "", "", ""], try "aaa".py.split("a"))
        XCTAssertEqual(["", "b ", "b "], try "ab ab ".py.split("a"))
        XCTAssertEqual(["a", " a", " "], try "ab ab ".py.split("b"))
        XCTAssertEqual(["", " ", " "], try "ab ab ".py.split("ab"))
        XCTAssertEqual(["ab ab "], try "ab ab ".py.split("ba"))
        XCTAssertEqual(["a", "b "], try "ab ab ".py.split("b a"))
        XCTAssertEqual(["", "", "bb  ", "", "bb  "], try "aabb  aabb  ".py.split("a"))
        XCTAssertEqual(["aa", "", "  aa", "", "  "], try "aabb  aabb  ".py.split("b"))
        XCTAssertEqual(["aabb", "", "aabb", "", ""], try "aabb  aabb  ".py.split(" "))
        XCTAssertEqual(["aab", "abb  "], try "aabb  aabb  ".py.split("b  a"))
        XCTAssertEqual(["", "ab", "ab", ""], try " ab ab ".py.split(" "))
        XCTAssertThrowsError(try " ab ab ".py.split(""))
        XCTAssertThrowsError(try "a".py.split(""))
        XCTAssertEqual([""], try "".py.split("a"))
        XCTAssertThrowsError(try "".py.split(""))
        XCTAssertEqual(["", "bc"], try "abc".py.split("a", 1))
        XCTAssertEqual(["a", "c"], try "abc".py.split("b", 1))
        XCTAssertEqual(["ab", ""], try "abc".py.split("c", 1))
        XCTAssertEqual(["abc"], try "abc".py.split("d", 1))
        XCTAssertEqual(["", "b ab "], try "ab ab ".py.split("a", 1))
        XCTAssertEqual(["a", " ab "], try "ab ab ".py.split("b", 1))
        XCTAssertEqual(["", " ab "], try "ab ab ".py.split("ab", 1))
        XCTAssertEqual(["ab ab "], try "ab ab ".py.split("ba", 1))
        XCTAssertEqual(["a", "b "], try "ab ab ".py.split("b a", 1))
        XCTAssertEqual(["", "abb  aabb  "], try "aabb  aabb  ".py.split("a", 1))
        XCTAssertEqual(["aa", "b  aabb  "], try "aabb  aabb  ".py.split("b", 1))
        XCTAssertEqual(["aabb", " aabb  "], try "aabb  aabb  ".py.split(" ", 1))
        XCTAssertEqual(["aab", "abb  "], try "aabb  aabb  ".py.split("b  a", 1))
        XCTAssertEqual(["", "ab ab "], try " ab ab ".py.split(" ", 1))
        XCTAssertThrowsError(try " ab ab ".py.split("", 1))
        XCTAssertThrowsError(try "a".py.split("", 1))
        XCTAssertEqual([""], try "".py.split("a", 1))
        XCTAssertThrowsError(try "".py.split("", 1))
        XCTAssertEqual(["", "bc"], try "abc".py.split("a", 2))
        XCTAssertEqual(["a", "c"], try "abc".py.split("b", 2))
        XCTAssertEqual(["ab", ""], try "abc".py.split("c", 2))
        XCTAssertEqual(["abc"], try "abc".py.split("d", 2))
        XCTAssertEqual(["", "b ", "b "], try "ab ab ".py.split("a", 2))
        XCTAssertEqual(["a", " a", " "], try "ab ab ".py.split("b", 2))
        XCTAssertEqual(["", " ", " "], try "ab ab ".py.split("ab", 2))
        XCTAssertEqual(["ab ab "], try "ab ab ".py.split("ba", 2))
        XCTAssertEqual(["a", "b "], try "ab ab ".py.split("b a", 2))
        XCTAssertEqual(["", "", "bb  aabb  "], try "aabb  aabb  ".py.split("a", 2))
        XCTAssertEqual(["aa", "", "  aabb  "], try "aabb  aabb  ".py.split("b", 2))
        XCTAssertEqual(["aabb", "", "aabb  "], try "aabb  aabb  ".py.split(" ", 2))
        XCTAssertEqual(["aab", "abb  "], try "aabb  aabb  ".py.split("b  a", 2))
        XCTAssertEqual(["", "ab", "ab "], try " ab ab ".py.split(" ", 2))
        XCTAssertThrowsError(try " ab ab ".py.split("", 2))
        XCTAssertThrowsError(try "a".py.split("", 2))
        XCTAssertEqual([""], try "".py.split("a", 2))
        XCTAssertThrowsError(try "".py.split("", 2))
        XCTAssertEqual(["a", "c"], try "abc".py.split("b", 10))
        XCTAssertEqual(["abc"], try "abc".py.split("b", 0))
        XCTAssertEqual(["a", "c"], try "abc".py.split("b", -1))
        XCTAssertEqual(["a", "c"], try "abc".py.split("b", -10000))
        XCTAssertEqual(["abc"], try "abc".py.split())
        XCTAssertEqual(["ab", "ab"], try "ab ab ".py.split())
        XCTAssertEqual(["ab", "ab"], try " ab ab ".py.split())
        XCTAssertEqual(["aabb", "aabb"], try "aabb  aabb  ".py.split())
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc".py.split())
        XCTAssertEqual(["a", "bb", "ccc"], try " a bb  ccc".py.split())
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc   ".py.split())
        XCTAssertEqual(["a", "bb", "ccc"], try " a bb  ccc   ".py.split())
        XCTAssertEqual(["a"], try "a".py.split())
        XCTAssertEqual([], try "".py.split())
        XCTAssertEqual(["abc"], try "abc".py.split(nil, 1))
        XCTAssertEqual(["ab", "ab "], try "ab ab ".py.split(nil, 1))
        XCTAssertEqual(["ab", "ab "], try " ab ab ".py.split(nil, 1))
        XCTAssertEqual(["aabb", "aabb  "], try "aabb  aabb  ".py.split(nil, 1))
        XCTAssertEqual(["a", "bb  ccc"], try "a bb  ccc".py.split(nil, 1))
        XCTAssertEqual(["a", "bb  ccc"], try " a bb  ccc".py.split(nil, 1))
        XCTAssertEqual(["a", "bb  ccc   "], try "a bb  ccc   ".py.split(nil, 1))
        XCTAssertEqual(["a", "bb  ccc   "], try " a bb  ccc   ".py.split(nil, 1))
        XCTAssertEqual(["a"], try "a".py.split(nil, 1))
        XCTAssertEqual([], try "".py.split(nil, 1))
        XCTAssertEqual(["abc"], try "abc".py.split(nil, 2))
        XCTAssertEqual(["ab", "ab"], try "ab ab ".py.split(nil, 2))
        XCTAssertEqual(["ab", "ab"], try " ab ab ".py.split(nil, 2))
        XCTAssertEqual(["aabb", "aabb"], try "aabb  aabb  ".py.split(nil, 2))
        XCTAssertEqual(["a", "bb", "ccc"], try "a bb  ccc".py.split(nil, 2))
        XCTAssertEqual(["a", "bb", "ccc"], try " a bb  ccc".py.split(nil, 2))
        XCTAssertEqual(["a", "bb", "ccc   "], try "a bb  ccc   ".py.split(nil, 2))
        XCTAssertEqual(["a", "bb", "ccc   "], try " a bb  ccc   ".py.split(nil, 2))
        XCTAssertEqual(["a"], try "a".py.split(nil, 2))
        XCTAssertEqual([], try "".py.split(nil, 2))
    }

    func test_splitlines() {
        XCTAssertEqual(["abc"], "abc".py.splitlines())
        XCTAssertEqual(["a", "bc"], "a\rbc".py.splitlines())
        XCTAssertEqual(["a", "bc"], "a\nbc".py.splitlines())
        XCTAssertEqual(["a", "b", "c"], "a\rb\rc".py.splitlines())
        XCTAssertEqual(["a", "b", "c"], "a\nb\nc".py.splitlines())
        XCTAssertEqual(["a", "", "bc"], "a\n\rbc".py.splitlines())
        XCTAssertEqual([], "".py.splitlines())
        XCTAssertEqual(["abc"], "abc".py.splitlines(true))
        XCTAssertEqual(["a\r", "bc"], "a\rbc".py.splitlines(true))
        XCTAssertEqual(["a\n", "bc"], "a\nbc".py.splitlines(true))
        XCTAssertEqual(["a\n", "\r", "bc"], "a\n\rbc".py.splitlines(true))
        XCTAssertEqual([], "".py.splitlines(true))
    }

    func test_startswith_single_prefix() {
        XCTAssertEqual(true, "a".py.startswith("a"))
        XCTAssertEqual(true, "abc".py.startswith("a"))
        XCTAssertEqual(false, "abc".py.startswith("c"))
        XCTAssertEqual(true, "abcab".py.startswith("ab"))
        XCTAssertEqual(false, "abcab".py.startswith("ac"))
        XCTAssertEqual(false, "".py.startswith("a"))
        XCTAssertEqual(true, "a".py.startswith(""))
        XCTAssertEqual(true, "".py.startswith(""))
        XCTAssertEqual(false, "abcab".py.startswith("a", 1, 3))
        XCTAssertEqual(false, "abcab".py.startswith("a", 1, 4))
        XCTAssertEqual(false, "abcab".py.startswith("ab", 1, 3))
        XCTAssertEqual(false, "abcab".py.startswith("ab", 1, 4))
        XCTAssertEqual(false, "abcab".py.startswith("a", 1))
        XCTAssertEqual(false, "abcab".py.startswith("a", 4))
        XCTAssertEqual(false, "abcab".py.startswith("a", 3, 1))
        XCTAssertEqual(true, "abcab".py.startswith("", 1, 3))
        XCTAssertEqual(false, "abc".py.startswith("a", -3, 0))
        XCTAssertEqual(false, "abc".py.startswith("a", -2, -1))
        XCTAssertEqual(true, "abc".py.startswith("b", -2, -1))
        XCTAssertEqual(true, "abcab".py.startswith("ab", 0, 999))
        XCTAssertEqual(false, "abcab".py.startswith("ab", 999))
    }

    func test_startswith_multiple_prefixes() {
        XCTAssertEqual(true, "a".py.startswith(["a"]))
        XCTAssertEqual(true, "abc".py.startswith(["a"]))
        XCTAssertEqual(false, "abc".py.startswith(["c"]))
        XCTAssertEqual(false, "abc".py.startswith(["b", "c"]))
        XCTAssertEqual(true, "abc".py.startswith(["b", "a"]))
        XCTAssertEqual(true, "abc".py.startswith(["ab", "bc", "abc"]))
        XCTAssertEqual(false, "abc".py.startswith(["bc", "ca", "cba"]))
        XCTAssertEqual(false, "".py.startswith(["a"]))
        XCTAssertEqual(true, "a".py.startswith([""]))
        XCTAssertEqual(true, "".py.startswith([""]))
        XCTAssertEqual(false, "a".py.startswith([]))
        XCTAssertEqual(false, "".py.startswith([]))
    }

    func test_strip() {
        XCTAssertEqual(String("ab ab"), "ab ab".py.strip())
        XCTAssertEqual(String("b ab"), "ab ab".py.strip("a"))
        XCTAssertEqual(String("ab a"), "ab ab".py.strip("b"))
        XCTAssertEqual(String(" "), "ab ab".py.strip("ab"))
        XCTAssertEqual(String("b ab "), "ab ab ".py.strip("a"))
        XCTAssertEqual(String(" ab "), "ab ab ".py.strip("ab"))
        XCTAssertEqual(String(" ab "), "ab ab ".py.strip("ba"))
        XCTAssertEqual(String(" ab ab"), " ab ab".py.strip("a"))
        XCTAssertEqual(String(" ab "), " ab ab".py.strip("ab"))
        XCTAssertEqual(String(" ab "), " ab ab".py.strip("ba"))
        XCTAssertEqual(String("ab ab"), " ab ab ".py.strip())
        XCTAssertEqual(String("ab ab"), " ab ab ".py.strip(" "))
        XCTAssertEqual(String(" ab ab "), " ab ab ".py.strip(""))
        XCTAssertEqual(String(""), "a".py.strip("a"))
        XCTAssertEqual(String(""), "".py.strip("a"))
        XCTAssertEqual(String("a"), "a".py.strip(""))
        XCTAssertEqual(String(""), "".py.strip(""))
    }

    func test_swapcase() {
        XCTAssertEqual(String("A"), "a".py.swapcase())
        XCTAssertEqual(String("aB"), "Ab".py.swapcase())
        XCTAssertEqual(String("ABC"), "abc".py.swapcase())
        XCTAssertEqual(String("AbC"), "aBc".py.swapcase())
        XCTAssertEqual(String("A C"), "a c".py.swapcase())
        XCTAssertEqual(String("3"), "3".py.swapcase())
        XCTAssertEqual(String("3f"), "3F".py.swapcase())
        XCTAssertEqual(String("3F"), "3f".py.swapcase())
        XCTAssertEqual(String(""), "".py.swapcase())
        XCTAssertEqual(String("@"), "@".py.swapcase())
        XCTAssertEqual(String(" "), " ".py.swapcase())
        XCTAssertEqual(String("3f@"), "3F@".py.swapcase())
        XCTAssertEqual(String("\n"), "\n".py.swapcase())
    }

    func test_title() {
        XCTAssertEqual(String("A"), "a".py.title())
        XCTAssertEqual(String("Aaa"), "aaa".py.title())
        XCTAssertEqual(String("Aaa"), "aAa".py.title())
        XCTAssertEqual(String("Aaa"), "Aaa".py.title())
        XCTAssertEqual(String("Aaa Aaa Aaa"), "aAa AAA aaA".py.title())
        XCTAssertEqual(String("Aaa Aaa Aaa"), "AAa AAA AaA".py.title())
        XCTAssertEqual(String("Aaa Bbb Ccc"), "Aaa Bbb Ccc".py.title())
        XCTAssertEqual(String("Aaa\nAaa"), "aAa\naaA".py.title())
        XCTAssertEqual(String("Aaa0Aaa"), "aAa0aaA".py.title())
        XCTAssertEqual(String("Aaa-Aaa"), "aAa-aaA".py.title())
        XCTAssertEqual(String("Aaa/Aaa"), "aAa/aaA".py.title())
        XCTAssertEqual(String("Aaa'Aaa"), "aAa'aaA".py.title())
        XCTAssertEqual(String("Aaa-Aaa"), "AAa-AaA".py.title())
        XCTAssertEqual(String("Aaa-Abc"), "Aaa-Abc".py.title())
        XCTAssertEqual(String(" Aa A "), " aA a ".py.title())
        XCTAssertEqual(String(" Aa A "), " Aa A ".py.title())
        XCTAssertEqual(String(" Aa  "), " Aa  ".py.title())
        XCTAssertEqual(String("   Aaa Aaa"), "   Aaa Aaa".py.title())
        XCTAssertEqual(String("   Aaa Aaa"), "   AaA Aaa".py.title())
        XCTAssertEqual(String("Aaa @@@ Aaa"), "Aaa @@@ Aaa".py.title())
        XCTAssertEqual(String("Aaa @@@ Aaa@@@"), "Aaa @@@ Aaa@@@".py.title())
        XCTAssertEqual(String("Aaa @@@@Aaa@@@"), "Aaa @@@@Aaa@@@".py.title())
        XCTAssertEqual(String(""), "".py.title())
    }

    func test_upper() {
        XCTAssertEqual(String("A"), "a".py.upper())
        XCTAssertEqual(String("AB"), "Ab".py.upper())
        XCTAssertEqual(String("ABC"), "abc".py.upper())
        XCTAssertEqual(String("ABC"), "aBc".py.upper())
        XCTAssertEqual(String("A C"), "a c".py.upper())
        XCTAssertEqual(String("3"), "3".py.upper())
        XCTAssertEqual(String("3F"), "3F".py.upper())
        XCTAssertEqual(String("3F"), "3f".py.upper())
        XCTAssertEqual(String(""), "".py.upper())
        XCTAssertEqual(String("@"), "@".py.upper())
        XCTAssertEqual(String(" "), " ".py.upper())
        XCTAssertEqual(String("3F@"), "3F@".py.upper())
        XCTAssertEqual(String("\n"), "\n".py.upper())
    }

    func test_zfill() {
        XCTAssertEqual(String("00001"), "1".py.zfill(5))
        XCTAssertEqual(String("-0001"), "-1".py.zfill(5))
        XCTAssertEqual(String("+0001"), "+1".py.zfill(5))
        XCTAssertEqual(String("0000a"), "a".py.zfill(5))
        XCTAssertEqual(String("-000a"), "-a".py.zfill(5))
        XCTAssertEqual(String("+000a"), "+a".py.zfill(5))
        XCTAssertEqual(String("00100"), "100".py.zfill(5))
        XCTAssertEqual(String("-0100"), "-100".py.zfill(5))
        XCTAssertEqual(String("+0100"), "+100".py.zfill(5))
        XCTAssertEqual(String("01000"), "1000".py.zfill(5))
        XCTAssertEqual(String("-1000"), "-1000".py.zfill(5))
        XCTAssertEqual(String("+1000"), "+1000".py.zfill(5))
        XCTAssertEqual(String("10000"), "10000".py.zfill(5))
        XCTAssertEqual(String("-10000"), "-10000".py.zfill(5))
        XCTAssertEqual(String("+10000"), "+10000".py.zfill(5))
        XCTAssertEqual(String("-00-1"), "--1".py.zfill(5))
        XCTAssertEqual(String("+00+1"), "++1".py.zfill(5))
        XCTAssertEqual(String("-00+1"), "-+1".py.zfill(5))
        XCTAssertEqual(String("+00-1"), "+-1".py.zfill(5))
        XCTAssertEqual(String("-001-"), "-1-".py.zfill(5))
        XCTAssertEqual(String("+001+"), "+1+".py.zfill(5))
        XCTAssertEqual(String("-0---"), "----".py.zfill(5))
        XCTAssertEqual(String("+0+++"), "++++".py.zfill(5))
        XCTAssertEqual(String("123"), "123".py.zfill(0))
        XCTAssertEqual(String("123"), "123".py.zfill(-1))
        XCTAssertEqual(String("123"), "123".py.zfill(-100))
        XCTAssertEqual(String("1"), "1".py.zfill(-1))
        XCTAssertEqual(String("-"), "-".py.zfill(-1))
        XCTAssertEqual(String("+"), "+".py.zfill(-1))
        XCTAssertEqual(String("1"), "1".py.zfill(0))
        XCTAssertEqual(String("-"), "-".py.zfill(0))
        XCTAssertEqual(String("+"), "+".py.zfill(0))
        XCTAssertEqual(String("1"), "1".py.zfill(1))
        XCTAssertEqual(String("-"), "-".py.zfill(1))
        XCTAssertEqual(String("+"), "+".py.zfill(1))
        XCTAssertEqual(String("01"), "1".py.zfill(2))
        XCTAssertEqual(String("-0"), "-".py.zfill(2))
        XCTAssertEqual(String("+0"), "+".py.zfill(2))
        XCTAssertEqual(String("00000"), "".py.zfill(5))
        XCTAssertEqual(String(""), "".py.zfill(0))
        XCTAssertEqual(String(""), "".py.zfill(-1))
        XCTAssertEqual(String(""), "".py.zfill(-100))
    }

    static var allTests = [
        ("test_add", test_add),
        ("test_contains", test_contains),
        ("test_eq", test_eq),
        ("test_ge", test_ge),
        ("test_getitem", test_getitem),
        ("test_slice", test_slice),
        ("test_gt", test_gt),
        ("test_le", test_le),
        ("test_len", test_len),
        ("test_lt", test_lt),
        ("test_mul", test_mul),
        ("test_ne", test_ne),
        ("test_repr", test_repr),
        ("test_rmul", test_rmul),
        ("test_capitalize", test_capitalize),
        ("test_casefold", test_casefold),
        ("test_center", test_center),
        ("test_count", test_count),
        ("test_endswith_single_prefix", test_endswith_single_prefix),
        ("test_endswith_multiple_prefixes", test_endswith_multiple_prefixes),
        ("test_expandtabs", test_expandtabs),
        ("test_find", test_find),
        ("test_index", test_index),
        ("test_isalnum", test_isalnum),
        ("test_isalpha", test_isalpha),
        ("test_isascii", test_isascii),
        ("test_isdecimal", test_isdecimal),
        ("test_isdigit", test_isdigit),
        ("test_islower", test_islower),
        ("test_isnumeric", test_isnumeric),
        ("test_isprintable", test_isprintable),
        ("test_isspace", test_isspace),
        ("test_istitle", test_istitle),
        ("test_isupper", test_isupper),
        ("test_join", test_join),
        ("test_ljust", test_ljust),
        ("test_lower", test_lower),
        ("test_lstrip", test_lstrip),
        ("test_partition", test_partition),
        ("test_replace", test_replace),
        ("test_rfind", test_rfind),
        ("test_rindex", test_rindex),
        ("test_rjust", test_rjust),
        ("test_rsplit", test_rsplit),
        ("test_rpartition", test_rpartition),
        ("test_rstrip", test_rstrip),
        ("test_split", test_split),
        ("test_splitlines", test_splitlines),
        ("test_startswith_single_prefix", test_startswith_single_prefix),
        ("test_startswith_multiple_prefixes", test_startswith_multiple_prefixes),
        ("test_strip", test_strip),
        ("test_swapcase", test_swapcase),
        ("test_title", test_title),
        ("test_upper", test_upper),
        ("test_zfill", test_zfill),
    ]
}
