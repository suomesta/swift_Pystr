"""pystr_test_creator.py creates PystrTests.swift.

The main advantage of this way is expected result can be gotten from  actual
Python str-function results.
"""

from collections import OrderedDict

TEST_MAP = OrderedDict((
    ('test_add', (
        ("'a'.__add__('a')", '"a".py.add("a")'),
        ("'aAa'.__add__('a')", '"aAa".py.add("a")'),
        ("'AAA'.__add__('a')", '"AAA".py.add("a")'),
        ("'a'.__add__('')", '"a".py.add("")'),
        ("''.__add__('a')", '"".py.add("a")'),
        ("''.__add__('')", '"".py.add("")'),
    )),
    ('test_contains', (
        ("'a'.__contains__('a')", '"a".py.contains("a")'),
        ("'aAa'.__contains__('a')", '"aAa".py.contains("a")'),
        ("'AAA'.__contains__('a')", '"AAA".py.contains("a")'),
        ("'a'.__contains__('')", '"a".py.contains("")'),
        ("''.__contains__('a')", '"".py.contains("a")'),
        ("''.__contains__('')", '"".py.contains("")'),
    )),
    ('test_eq', (
        ("'a'.__eq__('a')", '"a".py.eq("a")'),
        ("'A'.__eq__('a')", '"A".py.eq("a")'),
        ("'AAA'.__eq__('a')", '"AAA".py.eq("a")'),
        ("'a'.__eq__('')", '"a".py.eq("")'),
        ("''.__eq__('a')", '"".py.eq("a")'),
        ("''.__eq__('')", '"".py.eq("")'),
    )),
    ('test_ge', (
        ("'a'.__ge__('a')", '"a".py.ge("a")'),
        ("'A'.__ge__('a')", '"A".py.ge("a")'),
        ("'a'.__ge__('A')", '"a".py.ge("A")'),
        ("'AAA'.__ge__('a')", '"AAA".py.ge("a")'),
        ("'a'.__ge__('')", '"a".py.ge("")'),
        ("''.__ge__('a')", '"".py.ge("a")'),
        ("''.__ge__('')", '"".py.ge("")'),
    )),
    ('test_getitem', (
        ("'abc'.__getitem__(0)", 'try "abc".py.getitem(0)'),
        ("'abc'.__getitem__(1)", 'try "abc".py.getitem(1)'),
        ("'abc'.__getitem__(2)", 'try "abc".py.getitem(2)'),
        ("'abc'.__getitem__(3)", 'try "abc".py.getitem(3)'),
        ("'abc'.__getitem__(-3)", 'try "abc".py.getitem(-3)'),
        ("'abc'.__getitem__(-2)", 'try "abc".py.getitem(-2)'),
        ("'abc'.__getitem__(-1)", 'try "abc".py.getitem(-1)'),
        ("'abc'.__getitem__(10)", 'try "abc".py.getitem(10)'),
        ("'abc'.__getitem__(-10)", 'try "abc".py.getitem(-10)'),
        ("''.__getitem__(0)", 'try "".py.getitem(0)'),
        ("''.__getitem__(1)", 'try "".py.getitem(1)'),
        ("''.__getitem__(-1)", 'try "".py.getitem(-1)'),
    )),
    ('test_slice', (
        ("'abcdefgh'.__getitem__(slice(None, None, None))",
         'try "abcdefgh".py.slice(nil, nil, nil)'),
        ("'abcdefgh'.__getitem__(slice(None, 0))",
         'try "abcdefgh".py.slice(nil, 0)'),
        ("'abcdefgh'.__getitem__(slice(None, 5))",
         'try "abcdefgh".py.slice(nil, 5)'),
        ("'abcdefgh'.__getitem__(slice(0, None, None))",
         'try "abcdefgh".py.slice(0, nil, nil)'),
        ("'abcdefgh'.__getitem__(slice(1, 0))",
         'try "abcdefgh".py.slice(1, 0)'),
        ("'abcdefgh'.__getitem__(slice(1, 100))",
         'try "abcdefgh".py.slice(1, 100)'),
        ("'abcdefgh'.__getitem__(slice(100, 1))",
         'try "abcdefgh".py.slice(100, 1)'),
        ("'abcdefgh'.__getitem__(slice(2, 2))",
         'try "abcdefgh".py.slice(2, 2)'),
        ("'abcdefgh'.__getitem__(slice(200, 100))",
         'try "abcdefgh".py.slice(200, 100)'),
        ("'abcdefgh'.__getitem__(slice(1, -1))",
         'try "abcdefgh".py.slice(1, -1)'),
        ("'abcdefgh'.__getitem__(slice(-100, 100))",
         'try "abcdefgh".py.slice(-100, 100)'),
        ("'abcdefgh'.__getitem__(slice(1, -100))",
         'try "abcdefgh".py.slice(1, -100)'),
        ("'abcdefgh'.__getitem__(slice(0, None))",
         'try "abcdefgh".py.slice(0, nil)'),
        ("'abcdefgh'.__getitem__(slice(None, None))",
         'try "abcdefgh".py.slice(nil, nil)'),
        ("'abcdefgh'.__getitem__(slice(None, None, 0))",
         'try "abcdefgh".py.slice(nil, nil, 0)'),
        ("'abcdefgh'.__getitem__(slice(None, None, 2))",
         'try "abcdefgh".py.slice(nil, nil, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, 0, 2))",
         'try "abcdefgh".py.slice(1, 0, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, 100, 2))",
         'try "abcdefgh".py.slice(1, 100, 2)'),
        ("'abcdefgh'.__getitem__(slice(100, 1, 2))",
         'try "abcdefgh".py.slice(100, 1, 2)'),
        ("'abcdefgh'.__getitem__(slice(2, 2, 2))",
         'try "abcdefgh".py.slice(2, 2, 2)'),
        ("'abcdefgh'.__getitem__(slice(200, 100, 2))",
         'try "abcdefgh".py.slice(200, 100, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, -1, 2))",
         'try "abcdefgh".py.slice(1, -1, 2)'),
        ("'abcdefgh'.__getitem__(slice(-100, 100, 2))",
         'try "abcdefgh".py.slice(-100, 100, 2)'),
        ("'abcdefgh'.__getitem__(slice(1, -100, 2))",
         'try "abcdefgh".py.slice(1, -100, 2)'),
        ("'abcdefgh'.__getitem__(slice(0, None, 2))",
         'try "abcdefgh".py.slice(0, nil, 2)'),
        ("'abcdefgh'.__getitem__(slice(None, None, -1))",
         'try "abcdefgh".py.slice(nil, nil, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, 0, -1))",
         'try "abcdefgh".py.slice(1, 0, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, 100, -1))",
         'try "abcdefgh".py.slice(1, 100, -1)'),
        ("'abcdefgh'.__getitem__(slice(100, 1, -1))",
         'try "abcdefgh".py.slice(100, 1, -1)'),
        ("'abcdefgh'.__getitem__(slice(2, 2, -1))",
         'try "abcdefgh".py.slice(2, 2, -1)'),
        ("'abcdefgh'.__getitem__(slice(200, 100, -1))",
         'try "abcdefgh".py.slice(200, 100, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, -1, -1))",
         'try "abcdefgh".py.slice(1, -1, -1)'),
        ("'abcdefgh'.__getitem__(slice(-100, 100, -1))",
         'try "abcdefgh".py.slice(-100, 100, -1)'),
        ("'abcdefgh'.__getitem__(slice(1, -100, -1))",
         'try "abcdefgh".py.slice(1, -100, -1)'),
        ("'abcdefgh'.__getitem__(slice(0, None, -1))",
         'try "abcdefgh".py.slice(0, nil, -1)'),
        ("'abcdefgh'.__getitem__(slice(None, None, None))",
         'try "abcdefgh".py.slice(nil, nil, nil)'),
    )),
    ('test_gt', (
        ("'a'.__gt__('a')", '"a".py.gt("a")'),
        ("'A'.__gt__('a')", '"A".py.gt("a")'),
        ("'a'.__gt__('A')", '"a".py.gt("A")'),
        ("'AAA'.__gt__('a')", '"AAA".py.gt("a")'),
        ("'a'.__gt__('')", '"a".py.gt("")'),
        ("''.__gt__('a')", '"".py.gt("a")'),
        ("''.__gt__('')", '"".py.gt("")'),
    )),
    ('test_le', (
        ("'a'.__le__('a')", '"a".py.le("a")'),
        ("'A'.__le__('a')", '"A".py.le("a")'),
        ("'a'.__le__('A')", '"a".py.le("A")'),
        ("'AAA'.__le__('a')", '"AAA".py.le("a")'),
        ("'a'.__le__('')", '"a".py.le("")'),
        ("''.__le__('a')", '"".py.le("a")'),
        ("''.__le__('')", '"".py.le("")'),
    )),
    ('test_len', (
        ("'a'.__len__()", '"a".py.len()'),
        ("'AAA'.__len__()", '"AAA".py.len()'),
        ("'あ'.__len__()", '"あ".py.len()'),
        ("'\\r\\n'.__len__()", '"\\r\\n".py.len()'),
        ("'\\n\\r'.__len__()", '"\\n\\r".py.len()'),
        ("''.__len__()", '"".py.len()'),
    )),
    ('test_lt', (
        ("'a'.__lt__('a')", '"a".py.lt("a")'),
        ("'A'.__lt__('a')", '"A".py.lt("a")'),
        ("'a'.__lt__('A')", '"a".py.lt("A")'),
        ("'AAA'.__lt__('a')", '"AAA".py.lt("a")'),
        ("'a'.__lt__('')", '"a".py.lt("")'),
        ("''.__lt__('a')", '"".py.lt("a")'),
        ("''.__lt__('')", '"".py.lt("")'),
    )),
    ('test_mul', (
        ("'a'.__mul__(3)", '"a".py.mul(3)'),
        ("'abc'.__mul__(3)", '"abc".py.mul(3)'),
        ("''.__mul__(10)", '"".py.mul(10)'),
        ("'abc'.__mul__(0)", '"abc".py.mul(0)'),
        ("'abc'.__mul__(-1)", '"abc".py.mul(-1)'),
    )),
    ('test_ne', (
        ("'a'.__ne__('a')", '"a".py.ne("a")'),
        ("'A'.__ne__('a')", '"A".py.ne("a")'),
        ("'AAA'.__ne__('a')", '"AAA".py.ne("a")'),
        ("'a'.__ne__('')", '"a".py.ne("")'),
        ("''.__ne__('a')", '"".py.ne("a")'),
        ("''.__ne__('')", '"".py.ne("")'),
    )),
    ('test_repr', (
        ("'abc\\'abc'.__repr__()", '"abc\'abc".py.repr()'),
        ("'abc\"\\'abc'.__repr__()", '"abc\\"\'abc".py.repr()'),
        ("'abc'.__repr__()", '"abc".py.repr()'),
        ("'a\\tbc'.__repr__()", '"a\\tbc".py.repr()'),
        ("'\\r\\t\\n\\\\'.__repr__()", '"\\r\\t\\n\\\\".py.repr()'),
        ("''.__repr__()", '"".py.repr()'),
    )),
    ('test_rmul', (
        ("'a'.__rmul__(3)", '"a".py.rmul(3)'),
        ("'abc'.__rmul__(3)", '"abc".py.rmul(3)'),
        ("''.__rmul__(10)", '"".py.rmul(10)'),
        ("'abc'.__rmul__(0)", '"abc".py.rmul(0)'),
        ("'abc'.__rmul__(-1)", '"abc".py.rmul(-1)'),
    )),
    ('test_capitalize', (
        ("'a'.capitalize()", '"a".py.capitalize()'),
        ("'a abc'.capitalize()", '"a abc".py.capitalize()'),
        ("'A ABC'.capitalize()", '"A ABC".py.capitalize()'),
        ("'A Abc'.capitalize()", '"A Abc".py.capitalize()'),
        ("'abc'.capitalize()", '"abc".py.capitalize()'),
        ("'ABC'.capitalize()", '"ABC".py.capitalize()'),
        ("'Abc'.capitalize()", '"Abc".py.capitalize()'),
        ("'98'.capitalize()", '"98".py.capitalize()'),
        ("'%$'.capitalize()", '"%$".py.capitalize()'),
        ("' '.capitalize()", '" ".py.capitalize()'),
        ("''.capitalize()", '"".py.capitalize()'),
    )),
    ('test_casefold', (
        ("'a'.casefold()", '"a".py.casefold()'),
        ("'Ab'.casefold()", '"Ab".py.casefold()'),
        ("'abc'.casefold()", '"abc".py.casefold()'),
        ("'aBc'.casefold()", '"aBc".py.casefold()'),
        ("'a c'.casefold()", '"a c".py.casefold()'),
        ("'3'.casefold()", '"3".py.casefold()'),
        ("'3F'.casefold()", '"3F".py.casefold()'),
        ("''.casefold()", '"".py.casefold()'),
        ("'@'.casefold()", '"@".py.casefold()'),
        ("' '.casefold()", '" ".py.casefold()'),
        ("'3F@'.casefold()", '"3F@".py.casefold()'),
        ("'\\n'.casefold()", '"\\n".py.casefold()'),
    )),
    ('test_center', (
        ("'a'.center(1)", 'try "a".py.center(1)'),
        ("'a'.center(2)", 'try "a".py.center(2)'),
        ("'a'.center(3)", 'try "a".py.center(3)'),
        ("'a'.center(4)", 'try "a".py.center(4)'),
        ("'aa'.center(2)", 'try "aa".py.center(2)'),
        ("'aa'.center(3)", 'try "aa".py.center(3)'),
        ("'aa'.center(4)", 'try "aa".py.center(4)'),
        ("'aa'.center(5)", 'try "aa".py.center(5)'),
        ("'A A '.center(9)", 'try "A A ".py.center(9)'),
        ("'A A '.center(10)", 'try "A A ".py.center(10)'),
        ("'A A '.center(11)", 'try "A A ".py.center(11)'),
        ("'A A '.center(15)", 'try "A A ".py.center(15)'),
        ("'a'.center(0)", 'try "a".py.center(0)'),
        ("'a'.center(-1)", 'try "a".py.center(-1)'),
        ("'a'.center(2, '@')", 'try "a".py.center(2, "@")'),
        ("'abc'.center(10, '@')", 'try "abc".py.center(10, "@")'),
        ("'a'.center(1, '@@')", 'try "a".py.center(1, "@@")'),
        ("'a'.center(1, '')", 'try "a".py.center(1, "")'),
        ("''.center(0)", 'try "".py.center(0)'),
        ("''.center(1)", 'try "".py.center(1)'),
        ("''.center(2)", 'try "".py.center(2)'),
        ("''.center(0, 'a')", 'try "".py.center(0, "a")'),
        ("''.center(1, 'a')", 'try "".py.center(1, "a")'),
        ("''.center(2, 'a')", 'try "".py.center(2, "a")'),
    )),
    ('test_count', (
        ("'a'.count('a')", '"a".py.count("a")'),
        ("'abc'.count('a')", '"abc".py.count("a")'),
        ("'abcab'.count('ab')", '"abcab".py.count("ab")'),
        ("'aaaaa'.count('aa')", '"aaaaa".py.count("aa")'),
        ("''.count('a')", '"".py.count("a")'),
        ("'a'.count('')", '"a".py.count("")'),
        ("''.count('')", '"".py.count("")'),
        ("'abc'.count('')", '"abc".py.count("")'),
        ("'abcab'.count('a', 1, 3)", '"abcab".py.count("a", 1, 3)'),
        ("'abcab'.count('a', 1, 4)", '"abcab".py.count("a", 1, 4)'),
        ("'abcab'.count('ab', 1, 3)", '"abcab".py.count("ab", 1, 3)'),
        ("'abcab'.count('ab', 1, 4)", '"abcab".py.count("ab", 1, 4)'),
        ("'abcab'.count('a', 1)", '"abcab".py.count("a", 1)'),
        ("'abcab'.count('a', 4)", '"abcab".py.count("a", 4)'),
        ("'abcab'.count('', 1, 3)", '"abcab".py.count("", 1, 3)'),
        ("'abcab'.count('ab', 999)", '"abcab".py.count("ab", 999)'),
        ("'abcab'.count('ab', 1, 999)", '"abcab".py.count("ab", 1, 999)'),
    )),
    ('test_endswith_single_prefix', (
        ("'a'.endswith('a')", '"a".py.endswith("a")'),
        ("'abc'.endswith('a')", '"abc".py.endswith("a")'),
        ("'abc'.endswith('c')", '"abc".py.endswith("c")'),
        ("'abcab'.endswith('ab')", '"abcab".py.endswith("ab")'),
        ("'abcab'.endswith('ac')", '"abcab".py.endswith("ac")'),
        ("''.endswith('a')", '"".py.endswith("a")'),
        ("'a'.endswith('')", '"a".py.endswith("")'),
        ("''.endswith('')", '"".py.endswith("")'),
        ("'abcab'.endswith('a', 1, 3)", '"abcab".py.endswith("a", 1, 3)'),
        ("'abcab'.endswith('a', 1, 4)", '"abcab".py.endswith("a", 1, 4)'),
        ("'abcab'.endswith('ab', 1, 3)", '"abcab".py.endswith("ab", 1, 3)'),
        ("'abcab'.endswith('ab', 1, 4)", '"abcab".py.endswith("ab", 1, 4)'),
        ("'abcab'.endswith('a', 1)", '"abcab".py.endswith("a", 1)'),
        ("'abcab'.endswith('a', 4)", '"abcab".py.endswith("a", 4)'),
        ("'abcab'.endswith('a', 3, 1)", '"abcab".py.endswith("a", 3, 1)'),
        ("'abcab'.endswith('', 1, 3)", '"abcab".py.endswith("", 1, 3)'),
        ("'abc'.endswith('a', -3, 0)", '"abc".py.endswith("a", -3, 0)'),
        ("'abc'.endswith('a', -2, -1)", '"abc".py.endswith("a", -2, -1)'),
        ("'abc'.endswith('b', -2, -1)", '"abc".py.endswith("b", -2, -1)'),
        ("'abcab'.endswith('ab', 0, 999)", '"abcab".py.endswith("ab", 0, 999)'),
        ("'abcab'.endswith('ab', 999)", '"abcab".py.endswith("ab", 999)'),
    )),
    ('test_endswith_multiple_prefixes', (
        ("'a'.endswith(('a',))", '"a".py.endswith(["a"])'),
        ("'abc'.endswith(('a',))", '"abc".py.endswith(["a"])'),
        ("'abc'.endswith(('c',))", '"abc".py.endswith(["c"])'),
        ("'abc'.endswith(('b', 'c'))", '"abc".py.endswith(["b", "c"])'),
        ("'abc'.endswith(('b', 'a'))", '"abc".py.endswith(["b", "a"])'),
        ("'abc'.endswith(('ab', 'bc', 'abc'))", '"abc".py.endswith(["ab", "bc", "abc"])'),
        ("'abc'.endswith(('bc', 'ca', 'cba'))", '"abc".py.endswith(["bc", "ca", "cba"])'),
        ("''.endswith(('a',))", '"".py.endswith(["a"])'),
        ("'a'.endswith(('',))", '"a".py.endswith([""])'),
        ("''.endswith(('',))", '"".py.endswith([""])'),
        ("'a'.endswith(tuple())", '"a".py.endswith([])'),
        ("''.endswith(tuple())", '"".py.endswith([])'),
    )),
    ('test_expandtabs', (
        ("'a'.expandtabs()", '"a".py.expandtabs()'),
        ("'\t'.expandtabs()", '"\\t".py.expandtabs()'),
        ("'a\t'.expandtabs()", '"a\\t".py.expandtabs()'),
        ("'\ta'.expandtabs()", '"\\ta".py.expandtabs()'),
        ("'\ta\t'.expandtabs()", '"\\ta\\t".py.expandtabs()'),
        ("'\ta\taa\taaa\t'.expandtabs()", '"\\ta\\taa\\taaa\\t".py.expandtabs()'),
        ("'\t\t\t'.expandtabs()", '"\\t\\t\\t".py.expandtabs()'),
        ("'\ta  a\t'.expandtabs()", '"\\ta  a\\t".py.expandtabs()'),
        ("'\ta\\na\t'.expandtabs()", '"\\ta\\na\\t".py.expandtabs()'),
        ("'a'.expandtabs(4)", '"a".py.expandtabs(4)'),
        ("'a\t'.expandtabs(4)", '"a\\t".py.expandtabs(4)'),
        ("'\ta'.expandtabs(4)", '"\\ta".py.expandtabs(4)'),
        ("'\ta\t'.expandtabs(4)", '"\\ta\\t".py.expandtabs(4)'),
        ("'\t\t\t'.expandtabs(4)", '"\\t\\t\\t".py.expandtabs(4)'),
        ("'\ta  a\t'.expandtabs(4)", '"\\ta  a\\t".py.expandtabs(4)'),
        ("'\ta\\na\t'.expandtabs(4)", '"\\ta\\na\\t".py.expandtabs(4)'),
        ("'a\t'.expandtabs(1)", '"a\\t".py.expandtabs(1)'),
        ("'a\t'.expandtabs(0)", '"a\\t".py.expandtabs(0)'),
        ("'a\t'.expandtabs(-1)", '"a\\t".py.expandtabs(-1)'),
        ("'aaaaaaaaa'.expandtabs()", '"aaaaaaaaa".py.expandtabs()'),
        ("'aaaaaaaaa\t'.expandtabs()", '"aaaaaaaaa\\t".py.expandtabs()'),
        ("'aaaaaaaa\t'.expandtabs()", '"aaaaaaaa\\t".py.expandtabs()'),
        ("'aaaaaaaaa'.expandtabs(1)", '"aaaaaaaaa".py.expandtabs(1)'),
        ("'aaaaaaaaa\t'.expandtabs(1)", '"aaaaaaaaa\\t".py.expandtabs(1)'),
        ("'aaaaaaaa\t'.expandtabs(1)", '"aaaaaaaa\\t".py.expandtabs(1)'),
        ("'aaaaaaaaa'.expandtabs(2)", '"aaaaaaaaa".py.expandtabs(2)'),
        ("'aaaaaaaaa\t'.expandtabs(2)", '"aaaaaaaaa\\t".py.expandtabs(2)'),
        ("'aaaaaaaa\t'.expandtabs(2)", '"aaaaaaaa\\t".py.expandtabs(2)'),
        ("'aaaaaaaaa'.expandtabs(0)", '"aaaaaaaaa".py.expandtabs(0)'),
        ("'aaaaaaaaa\t'.expandtabs(0)", '"aaaaaaaaa\\t".py.expandtabs(0)'),
        ("'aaaaaaaa\t'.expandtabs(0)", '"aaaaaaaa\\t".py.expandtabs(0)'),
        ("''.expandtabs()", '"".py.expandtabs()'),
        ("''.expandtabs(4)", '"".py.expandtabs(4)'),
        ("''.expandtabs(4)", '"".py.expandtabs(4)'),
        ("''.expandtabs(0)", '"".py.expandtabs(0)'),
        ("''.expandtabs(-1)", '"".py.expandtabs(-1)'),
    )),
    ('test_find', (
        ("'abc'.find('a')", '"abc".py.find("a")'),
        ("'abc'.find('d')", '"abc".py.find("d")'),
        ("'abc'.find('bc')", '"abc".py.find("bc")'),
        ("'abc'.find('ac')", '"abc".py.find("ac")'),
        ("'abcabc'.find('abc')", '"abcabc".py.find("abc")'),
        ("'abcab'.find('a', 1, 3)", '"abcab".py.find("a", 1, 3)'),
        ("'abcab'.find('a', 1, 4)", '"abcab".py.find("a", 1, 4)'),
        ("'abcab'.find('ab', 1, 3)", '"abcab".py.find("ab", 1, 3)'),
        ("'abcab'.find('ab', 1, 4)", '"abcab".py.find("ab", 1, 4)'),
        ("'abcab'.find('a', 3, 1)", '"abcab".py.find("a", 3, 1)'),
        ("'abcab'.find('a', 1)", '"abcab".py.find("a", 1)'),
        ("'abcab'.find('a', 4)", '"abcab".py.find("a", 4)'),
        ("'abcab'.find('', 1, 3)", '"abcab".py.find("", 1, 3)'),
        ("'abcab'.find('ab', 999)", '"abcab".py.find("ab", 999)'),
        ("'abcab'.find('ab', 1, 999)", '"abcab".py.find("ab", 1, 999)'),
        ("'abcab'.find('ab', -999)", '"abcab".py.find("ab", -999)'),
        ("'abcab'.find('ab', 0, -999)", '"abcab".py.find("ab", 0, -999)'),
        ("''.find('a')", '"".py.find("a")'),
        ("'a'.find('')", '"a".py.find("")'),
        ("''.find('')", '"".py.find("")'),
        ("'aaa'.find('', 2)", '"aaa".py.find("", 2)'),
        ("'aaa'.find('', 3)", '"aaa".py.find("", 3)'),
        ("'aaa'.find('', 4)", '"aaa".py.find("", 4)'),
        ("'aaa'.find('', -4)", '"aaa".py.find("", -4)'),
        ("'aaa'.find('', -3)", '"aaa".py.find("", -3)'),
        ("'aaa'.find('', -2)", '"aaa".py.find("", -2)'),
        ("''.find('', 999)", '"".py.find("", 999)'),
        ("''.find('', -999)", '"".py.find("", -999)'),
        ("''.find('', 999, -999)", '"".py.find("", 999, -999)'),
        ("''.find('', -999, 999)", '"".py.find("", -999, 999)'),
    )),
    ('test_index', (
        ("'abc'.index('a')", 'try "abc".py.index("a")'),
        ("'abc'.index('d')", 'try "abc".py.index("d")'),
        ("'abc'.index('bc')", 'try "abc".py.index("bc")'),
        ("'abc'.index('ac')", 'try "abc".py.index("ac")'),
        ("'abcabc'.index('abc')", 'try "abcabc".py.index("abc")'),
        ("'abcab'.index('a', 1, 3)", 'try "abcab".py.index("a", 1, 3)'),
        ("'abcab'.index('a', 1, 4)", 'try "abcab".py.index("a", 1, 4)'),
        ("'abcab'.index('ab', 1, 3)", 'try "abcab".py.index("ab", 1, 3)'),
        ("'abcab'.index('ab', 1, 4)", 'try "abcab".py.index("ab", 1, 4)'),
        ("'abcab'.index('a', 3, 1)", 'try "abcab".py.index("a", 3, 1)'),
        ("'abcab'.index('a', 1)", 'try "abcab".py.index("a", 1)'),
        ("'abcab'.index('a', 4)", 'try "abcab".py.index("a", 4)'),
        ("'abcab'.index('', 1, 3)", 'try "abcab".py.index("", 1, 3)'),
        ("'abcab'.index('ab', 999)", 'try "abcab".py.index("ab", 999)'),
        ("'abcab'.index('ab', 1, 999)", 'try "abcab".py.index("ab", 1, 999)'),
        ("'abcab'.index('ab', -999)", 'try "abcab".py.index("ab", -999)'),
        ("'abcab'.index('ab', 0, -999)", 'try "abcab".py.index("ab", 0, -999)'),
        ("''.index('a')", 'try "".py.index("a")'),
        ("'a'.index('')", 'try "a".py.index("")'),
        ("''.index('')", 'try "".py.index("")'),
        ("'aaa'.index('', 2)", 'try "aaa".py.index("", 2)'),
        ("'aaa'.index('', 3)", 'try "aaa".py.index("", 3)'),
        ("'aaa'.index('', 4)", 'try "aaa".py.index("", 4)'),
        ("'aaa'.index('', -4)", 'try "aaa".py.index("", -4)'),
        ("'aaa'.index('', -3)", 'try "aaa".py.index("", -3)'),
        ("'aaa'.index('', -2)", 'try "aaa".py.index("", -2)'),
        ("''.index('', 999)", 'try "".py.index("", 999)'),
        ("''.index('', -999)", 'try "".py.index("", -999)'),
        ("''.index('', 999, -999)", 'try "".py.index("", 999, -999)'),
        ("''.index('', -999, 999)", 'try "".py.index("", -999, 999)'),
    )),
    ('test_isalnum', (
        ("'a'.isalnum()", '"a".py.isalnum()'),
        ("'A'.isalnum()", '"A".py.isalnum()'),
        ("'abc'.isalnum()", '"abc".py.isalnum()'),
        ("'aBc'.isalnum()", '"aBc".py.isalnum()'),
        ("'a c'.isalnum()", '"a c".py.isalnum()'),
        ("'3'.isalnum()", '"3".py.isalnum()'),
        ("'3F'.isalnum()", '"3F".py.isalnum()'),
        ("''.isalnum()", '"".py.isalnum()'),
        ("'@'.isalnum()", '"@".py.isalnum()'),
        ("' '.isalnum()", '" ".py.isalnum()'),
        ("'3F@'.isalnum()", '"3F@".py.isalnum()'),
        ("'\\n'.isalnum()", '"\\n".py.isalnum()'),
    )),
    ('test_isalpha', (
        ("'a'.isalpha()", '"a".py.isalpha()'),
        ("'A'.isalpha()", '"A".py.isalpha()'),
        ("'abc'.isalpha()", '"abc".py.isalpha()'),
        ("'aBc'.isalpha()", '"aBc".py.isalpha()'),
        ("'a c'.isalpha()", '"a c".py.isalpha()'),
        ("'3'.isalpha()", '"3".py.isalpha()'),
        ("'3F'.isalpha()", '"3F".py.isalpha()'),
        ("''.isalpha()", '"".py.isalpha()'),
        ("'@'.isalpha()", '"@".py.isalpha()'),
        ("' '.isalpha()", '" ".py.isalpha()'),
        ("'3F@'.isalpha()", '"3F@".py.isalpha()'),
        ("'\\n'.isalpha()", '"\\n".py.isalpha()'),
    )),
    ('test_isascii', (
        ("'a'.isascii()", '"a".py.isascii()'),
        ("'A'.isascii()", '"A".py.isascii()'),
        ("'abc'.isascii()", '"abc".py.isascii()'),
        ("'aBc'.isascii()", '"aBc".py.isascii()'),
        ("'a c'.isascii()", '"a c".py.isascii()'),
        ("'3'.isascii()", '"3".py.isascii()'),
        ("'3F'.isascii()", '"3F".py.isascii()'),
        ("''.isascii()", '"".py.isascii()'),
        ("'@'.isascii()", '"@".py.isascii()'),
        ("' '.isascii()", '" ".py.isascii()'),
        ("'3F@'.isascii()", '"3F@".py.isascii()'),
        ("'\\n'.isascii()", '"\\n".py.isascii()'),
        ("'あ'.isascii()", '"あ".py.isascii()'),
    )),
    ('test_isdecimal', (
        ("'a'.isdecimal()", '"a".py.isdecimal()'),
        ("'A'.isdecimal()", '"A".py.isdecimal()'),
        ("'abc'.isdecimal()", '"abc".py.isdecimal()'),
        ("'aBc'.isdecimal()", '"aBc".py.isdecimal()'),
        ("'a c'.isdecimal()", '"a c".py.isdecimal()'),
        ("'3'.isdecimal()", '"3".py.isdecimal()'),
        ("'3F'.isdecimal()", '"3F".py.isdecimal()'),
        ("''.isdecimal()", '"".py.isdecimal()'),
        ("'@'.isdecimal()", '"@".py.isdecimal()'),
        ("' '.isdecimal()", '" ".py.isdecimal()'),
        ("'3F@'.isdecimal()", '"3F@".py.isdecimal()'),
        ("'\\n'.isdecimal()", '"\\n".py.isdecimal()'),
    )),
    ('test_isdigit', (
        ("'a'.isdigit()", '"a".py.isdigit()'),
        ("'A'.isdigit()", '"A".py.isdigit()'),
        ("'abc'.isdigit()", '"abc".py.isdigit()'),
        ("'aBc'.isdigit()", '"aBc".py.isdigit()'),
        ("'a c'.isdigit()", '"a c".py.isdigit()'),
        ("'3'.isdigit()", '"3".py.isdigit()'),
        ("'3F'.isdigit()", '"3F".py.isdigit()'),
        ("''.isdigit()", '"".py.isdigit()'),
        ("'@'.isdigit()", '"@".py.isdigit()'),
        ("' '.isdigit()", '" ".py.isdigit()'),
        ("'3F@'.isdigit()", '"3F@".py.isdigit()'),
        ("'\\n'.isdigit()", '"\\n".py.isdigit()'),
    )),
    ('test_islower', (
        ("'a'.islower()", '"a".py.islower()'),
        ("'A'.islower()", '"A".py.islower()'),
        ("'abc'.islower()", '"abc".py.islower()'),
        ("'aBc'.islower()", '"aBc".py.islower()'),
        ("'a c'.islower()", '"a c".py.islower()'),
        ("'3'.islower()", '"3".py.islower()'),
        ("'3F'.islower()", '"3F".py.islower()'),
        ("'3f'.islower()", '"3f".py.islower()'),
        ("''.islower()", '"".py.islower()'),
        ("'@'.islower()", '"@".py.islower()'),
        ("' '.islower()", '" ".py.islower()'),
        ("'3F@'.islower()", '"3F@".py.islower()'),
        ("'\\n'.islower()", '"\\n".py.islower()'),
    )),
    ('test_isnumeric', (
        ("'a'.isnumeric()", '"a".py.isnumeric()'),
        ("'A'.isnumeric()", '"A".py.isnumeric()'),
        ("'abc'.isnumeric()", '"abc".py.isnumeric()'),
        ("'aBc'.isnumeric()", '"aBc".py.isnumeric()'),
        ("'a c'.isnumeric()", '"a c".py.isnumeric()'),
        ("'3'.isnumeric()", '"3".py.isnumeric()'),
        ("'3F'.isnumeric()", '"3F".py.isnumeric()'),
        ("''.isnumeric()", '"".py.isnumeric()'),
        ("'@'.isnumeric()", '"@".py.isnumeric()'),
        ("' '.isnumeric()", '" ".py.isnumeric()'),
        ("'3F@'.isnumeric()", '"3F@".py.isnumeric()'),
        ("'\\n'.isnumeric()", '"\\n".py.isnumeric()'),
    )),
    ('test_isprintable', (
        ("'a'.isprintable()", '"a".py.isprintable()'),
        ("'A'.isprintable()", '"A".py.isprintable()'),
        ("'abc'.isprintable()", '"abc".py.isprintable()'),
        ("'aBc'.isprintable()", '"aBc".py.isprintable()'),
        ("'a c'.isprintable()", '"a c".py.isprintable()'),
        ("'3'.isprintable()", '"3".py.isprintable()'),
        ("'3F'.isprintable()", '"3F".py.isprintable()'),
        ("''.isprintable()", '"".py.isprintable()'),
        ("'@'.isprintable()", '"@".py.isprintable()'),
        ("' '.isprintable()", '" ".py.isprintable()'),
        ("'3F@'.isprintable()", '"3F@".py.isprintable()'),
        ("'\\n'.isprintable()", '"\\n".py.isprintable()'),
    )),
    ('test_isspace', (
        ("'a'.isspace()", '"a".py.isspace()'),
        ("'A'.isspace()", '"A".py.isspace()'),
        ("'abc'.isspace()", '"abc".py.isspace()'),
        ("'aBc'.isspace()", '"aBc".py.isspace()'),
        ("'a c'.isspace()", '"a c".py.isspace()'),
        ("'3'.isspace()", '"3".py.isspace()'),
        ("'3F'.isspace()", '"3F".py.isspace()'),
        ("''.isspace()", '"".py.isspace()'),
        ("'@'.isspace()", '"@".py.isspace()'),
        ("' '.isspace()", '" ".py.isspace()'),
        ("'  '.isspace()", '"  ".py.isspace()'),
        ("'   '.isspace()", '"   ".py.isspace()'),
        ("'3F@'.isspace()", '"3F@".py.isspace()'),
        ("'\\n'.isspace()", '"\\n".py.isspace()'),
    )),
    ('test_istitle', (
        ("'a'.istitle()", '"a".py.istitle()'),
        ("'aaa'.istitle()", '"aaa".py.istitle()'),
        ("'aAa'.istitle()", '"aAa".py.istitle()'),
        ("'Aaa'.istitle()", '"Aaa".py.istitle()'),
        ("'aAa AAA aaA'.istitle()", '"aAa AAA aaA".py.istitle()'),
        ("'AAa AAA AaA'.istitle()", '"AAa AAA AaA".py.istitle()'),
        ("'Aaa Bbb Ccc'.istitle()", '"Aaa Bbb Ccc".py.istitle()'),
        ("'aAa\\naaA'.istitle()", '"aAa\\naaA".py.istitle()'),
        ("'aAa0aaA'.istitle()", '"aAa0aaA".py.istitle()'),
        ("'aAa-aaA'.istitle()", '"aAa-aaA".py.istitle()'),
        ("'aAa/aaA'.istitle()", '"aAa/aaA".py.istitle()'),
        ("'aAa\\'aaA'.istitle()", '"aAa\'aaA".py.istitle()'),
        ("'AAa-AaA'.istitle()", '"AAa-AaA".py.istitle()'),
        ("'Aaa-Abc'.istitle()", '"Aaa-Abc".py.istitle()'),
        ("' aA a '.istitle()", '" aA a ".py.istitle()'),
        ("' Aa A '.istitle()", '" Aa A ".py.istitle()'),
        ("' Aa  '.istitle()", '" Aa  ".py.istitle()'),
        ("'   Aaa Aaa'.istitle()", '"   Aaa Aaa".py.istitle()'),
        ("'   AaA Aaa'.istitle()", '"   AaA Aaa".py.istitle()'),
        ("'Aaa @@@ Aaa'.istitle()", '"Aaa @@@ Aaa".py.istitle()'),
        ("'Aaa @@@ Aaa@@@'.istitle()", '"Aaa @@@ Aaa@@@".py.istitle()'),
        ("'Aaa @@@@Aaa@@@'.istitle()", '"Aaa @@@@Aaa@@@".py.istitle()'),
        ("''.istitle()", '"".py.istitle()'),
    )),
    ('test_isupper', (
        ("'a'.isupper()", '"a".py.isupper()'),
        ("'A'.isupper()", '"A".py.isupper()'),
        ("'abc'.isupper()", '"abc".py.isupper()'),
        ("'aBc'.isupper()", '"aBc".py.isupper()'),
        ("'a c'.isupper()", '"a c".py.isupper()'),
        ("'3'.isupper()", '"3".py.isupper()'),
        ("'3F'.isupper()", '"3F".py.isupper()'),
        ("''.isupper()", '"".py.isupper()'),
        ("'@'.isupper()", '"@".py.isupper()'),
        ("' '.isupper()", '" ".py.isupper()'),
        ("'3F@'.isupper()", '"3F@".py.isupper()'),
        ("'\\n'.isupper()", '"\\n".py.isupper()'),
    )),
    ('test_join', (
        ("''.join([])", '"".py.join([])'),
        ("'a'.join([])", '"a".py.join([])'),
        ("''.join(['a', 'b', 'c'])", '"".py.join(["a", "b", "c"])'),
        ("'a'.join(['a', 'b', 'c'])", '"a".py.join(["a", "b", "c"])'),
        ("''.join(['ab', 'bc'])", '"".py.join(["ab", "bc"])'),
        ("'a'.join(['ab', 'bc'])", '"a".py.join(["ab", "bc"])'),
        ("''.join(['abc'])", '"".py.join(["abc"])'),
        ("'a'.join(['abc'])", '"a".py.join(["abc"])'),
    )),
    ('test_ljust', (
        ("'a'.ljust(1)", 'try "a".py.ljust(1)'),
        ("'a'.ljust(2)", 'try "a".py.ljust(2)'),
        ("'a'.ljust(3)", 'try "a".py.ljust(3)'),
        ("'a'.ljust(4)", 'try "a".py.ljust(4)'),
        ("'aa'.ljust(2)", 'try "aa".py.ljust(2)'),
        ("'aa'.ljust(3)", 'try "aa".py.ljust(3)'),
        ("'aa'.ljust(4)", 'try "aa".py.ljust(4)'),
        ("'aa'.ljust(5)", 'try "aa".py.ljust(5)'),
        ("'A A '.ljust(9)", 'try "A A ".py.ljust(9)'),
        ("'A A '.ljust(10)", 'try "A A ".py.ljust(10)'),
        ("'A A '.ljust(11)", 'try "A A ".py.ljust(11)'),
        ("'A A '.ljust(15)", 'try "A A ".py.ljust(15)'),
        ("'a'.ljust(0)", 'try "a".py.ljust(0)'),
        ("'a'.ljust(-1)", 'try "a".py.ljust(-1)'),
        ("'a'.ljust(2, '@')", 'try "a".py.ljust(2, "@")'),
        ("'abc'.ljust(10, '@')", 'try "abc".py.ljust(10, "@")'),
        ("'a'.ljust(1, '@@')", 'try "a".py.ljust(1, "@@")'),
        ("'a'.ljust(1, '')", 'try "a".py.ljust(1, "")'),
        ("''.ljust(0)", 'try "".py.ljust(0)'),
        ("''.ljust(1)", 'try "".py.ljust(1)'),
        ("''.ljust(2)", 'try "".py.ljust(2)'),
        ("''.ljust(-1)", 'try "".py.ljust(-1)'),
    )),
    ('test_lower', (
        ("'a'.lower()", '"a".py.lower()'),
        ("'Ab'.lower()", '"Ab".py.lower()'),
        ("'abc'.lower()", '"abc".py.lower()'),
        ("'aBc'.lower()", '"aBc".py.lower()'),
        ("'a c'.lower()", '"a c".py.lower()'),
        ("'3'.lower()", '"3".py.lower()'),
        ("'3F'.lower()", '"3F".py.lower()'),
        ("''.lower()", '"".py.lower()'),
        ("'@'.lower()", '"@".py.lower()'),
        ("' '.lower()", '" ".py.lower()'),
        ("'3F@'.lower()", '"3F@".py.lower()'),
        ("'\\n'.lower()", '"\\n".py.lower()'),
    )),
    ('test_lstrip', (
        ("'ab ab'.lstrip()", '"ab ab".py.lstrip()'),
        ("'ab ab'.lstrip('a')", '"ab ab".py.lstrip("a")'),
        ("'ab ab'.lstrip('b')", '"ab ab".py.lstrip("b")'),
        ("'ab ab'.lstrip('ab')", '"ab ab".py.lstrip("ab")'),
        ("'ab ab '.lstrip('a')", '"ab ab ".py.lstrip("a")'),
        ("'ab ab '.lstrip('ab')", '"ab ab ".py.lstrip("ab")'),
        ("'ab ab '.lstrip('ba')", '"ab ab ".py.lstrip("ba")'),
        ("' ab ab'.lstrip('a')", '" ab ab".py.lstrip("a")'),
        ("' ab ab'.lstrip('ab')", '" ab ab".py.lstrip("ab")'),
        ("' ab ab'.lstrip('ba')", '" ab ab".py.lstrip("ba")'),
        ("' ab ab '.lstrip()", '" ab ab ".py.lstrip()'),
        ("' ab ab '.lstrip(' ')", '" ab ab ".py.lstrip(" ")'),
        ("' ab ab '.lstrip('')", '" ab ab ".py.lstrip("")'),
        ("'a'.lstrip('a')", '"a".py.lstrip("a")'),
        ("''.lstrip('a')", '"".py.lstrip("a")'),
        ("'a'.lstrip('')", '"a".py.lstrip("")'),
        ("''.lstrip('')", '"".py.lstrip("")'),
    )),
    ('test_partition', (
        ("'abc'.partition('a')", 'try "abc".py.partition("a")'),
        ("'abc'.partition('b')", 'try "abc".py.partition("b")'),
        ("'abc'.partition('c')", 'try "abc".py.partition("c")'),
        ("'abc'.partition('d')", 'try "abc".py.partition("d")'),
        ("'ab ab '.partition('a')", 'try "ab ab ".py.partition("a")'),
        ("'ab ab '.partition('b')", 'try "ab ab ".py.partition("b")'),
        ("'ab ab '.partition('ab')", 'try "ab ab ".py.partition("ab")'),
        ("'ab ab '.partition('ba')", 'try "ab ab ".py.partition("ba")'),
        ("'ab ab '.partition('b a')", 'try "ab ab ".py.partition("b a")'),
        ("' ab ab '.partition(' ')", 'try " ab ab ".py.partition(" ")'),
        ("' ab ab '.partition('')", 'try " ab ab ".py.partition("")'),
        ("''.partition('a')", 'try "".py.partition("a")'),
        ("''.partition('')", 'try "".py.partition("")'),
    )),
    ('test_replace', (
        ("'abc'.replace('b', 'a')", '"abc".py.replace("b", "a")'),
        ("'abc'.replace('d', 'a')", '"abc".py.replace("d", "a")'),
        ("'abc'.replace('bc', 'dd')", '"abc".py.replace("bc", "dd")'),
        ("'abc'.replace('cb', 'dd')", '"abc".py.replace("cb", "dd")'),
        ("'abc'.replace('bc', 'd')", '"abc".py.replace("bc", "d")'),
        ("'abc'.replace('cb', 'd')", '"abc".py.replace("cb", "d")'),
        ("'abca'.replace('bc', 'd')", '"abca".py.replace("bc", "d")'),
        ("'abc'.replace('', 'a')", '"abc".py.replace("", "a")'),
        ("'abc'.replace('b', '')", '"abc".py.replace("b", "")'),
        ("'abc'.replace('', '')", '"abc".py.replace("", "")'),
        ("''.replace('', 'a')", '"".py.replace("", "a")'),
        ("''.replace('b', '')", '"".py.replace("b", "")'),
        ("''.replace('', '')", '"".py.replace("", "")'),
        ("'abcabcabc'.replace('bc', 'dd', 4)",
         '"abcabcabc".py.replace("bc", "dd", 4)'),
        ("'abcabcabc'.replace('bc', 'dd', 3)",
         '"abcabcabc".py.replace("bc", "dd", 3)'),
        ("'abcabcabc'.replace('bc', 'dd', 2)",
         '"abcabcabc".py.replace("bc", "dd", 2)'),
        ("'abcabcabc'.replace('bc', 'dd', 1)",
         '"abcabcabc".py.replace("bc", "dd", 1)'),
        ("'abcabcabc'.replace('bc', 'dd', 0)",
         '"abcabcabc".py.replace("bc", "dd", 0)'),
        ("'abcabcabc'.replace('bc', 'dd', -1)",
         '"abcabcabc".py.replace("bc", "dd", -1)'),
        ("'abcabcabc'.replace('bc', 'dd', -2)",
         '"abcabcabc".py.replace("bc", "dd", -2)'),
    )),
    ('test_rfind', (
        ("'abc'.rfind('a')", '"abc".py.rfind("a")'),
        ("'abc'.rfind('d')", '"abc".py.rfind("d")'),
        ("'abc'.rfind('bc')", '"abc".py.rfind("bc")'),
        ("'abc'.rfind('ac')", '"abc".py.rfind("ac")'),
        ("'abcabc'.rfind('abc')", '"abcabc".py.rfind("abc")'),
        ("'abcabc'.rfind('')", '"abcabc".py.rfind("")'),
        ("'abcab'.rfind('a', 1, 3)", '"abcab".py.rfind("a", 1, 3)'),
        ("'abcab'.rfind('a', 1, 4)", '"abcab".py.rfind("a", 1, 4)'),
        ("'abcab'.rfind('ab', 1, 3)", '"abcab".py.rfind("ab", 1, 3)'),
        ("'abcab'.rfind('ab', 1, 4)", '"abcab".py.rfind("ab", 1, 4)'),
        ("'abcab'.rfind('a', 1)", '"abcab".py.rfind("a", 1)'),
        ("'abcab'.rfind('a', 4)", '"abcab".py.rfind("a", 4)'),
        ("'abcab'.rfind('', 1, 3)", '"abcab".py.rfind("", 1, 3)'),
        ("'abcab'.rfind('ab', 999)", '"abcab".py.rfind("ab", 999)'),
        ("'abcab'.rfind('ab', 1, 999)", '"abcab".py.rfind("ab", 1, 999)'),
        ("''.rfind('a')", '"".py.rfind("a")'),
        ("'a'.rfind('')", '"a".py.rfind("")'),
        ("''.rfind('')", '"".py.rfind("")'),
    )),
    ('test_rindex', (
        ("'abc'.rindex('a')", 'try "abc".py.rindex("a")'),
        ("'abc'.rindex('d')", 'try "abc".py.rindex("d")'),
        ("'abc'.rindex('bc')", 'try "abc".py.rindex("bc")'),
        ("'abc'.rindex('ac')", 'try "abc".py.rindex("ac")'),
        ("'abcabc'.rindex('abc')", 'try "abcabc".py.rindex("abc")'),
        ("'abcabc'.rindex('')", 'try "abcabc".py.rindex("")'),
        ("'abcab'.rindex('a', 1, 3)", 'try "abcab".py.rindex("a", 1, 3)'),
        ("'abcab'.rindex('a', 1, 4)", 'try "abcab".py.rindex("a", 1, 4)'),
        ("'abcab'.rindex('ab', 1, 3)", 'try "abcab".py.rindex("ab", 1, 3)'),
        ("'abcab'.rindex('ab', 1, 4)", 'try "abcab".py.rindex("ab", 1, 4)'),
        ("'abcab'.rindex('a', 1)", 'try "abcab".py.rindex("a", 1)'),
        ("'abcab'.rindex('a', 4)", 'try "abcab".py.rindex("a", 4)'),
        ("'abcab'.rindex('', 1, 3)", 'try "abcab".py.rindex("", 1, 3)'),
        ("'abcab'.rindex('ab', 999)", 'try "abcab".py.rindex("ab", 999)'),
        ("'abcab'.rindex('ab', 1, 999)", 'try "abcab".py.rindex("ab", 1, 999)'),
        ("''.rindex('a')", 'try "".py.rindex("a")'),
        ("'a'.rindex('')", 'try "a".py.rindex("")'),
        ("''.rindex('')", 'try "".py.rindex("")'),
    )),
    ('test_rjust', (
        ("'a'.rjust(1)", 'try "a".py.rjust(1)'),
        ("'a'.rjust(2)", 'try "a".py.rjust(2)'),
        ("'a'.rjust(3)", 'try "a".py.rjust(3)'),
        ("'a'.rjust(4)", 'try "a".py.rjust(4)'),
        ("'aa'.rjust(2)", 'try "aa".py.rjust(2)'),
        ("'aa'.rjust(3)", 'try "aa".py.rjust(3)'),
        ("'aa'.rjust(4)", 'try "aa".py.rjust(4)'),
        ("'aa'.rjust(5)", 'try "aa".py.rjust(5)'),
        ("'A A '.rjust(9)", 'try "A A ".py.rjust(9)'),
        ("'A A '.rjust(10)", 'try "A A ".py.rjust(10)'),
        ("'A A '.rjust(11)", 'try "A A ".py.rjust(11)'),
        ("'A A '.rjust(15)", 'try "A A ".py.rjust(15)'),
        ("'a'.rjust(0)", 'try "a".py.rjust(0)'),
        ("'a'.rjust(-1)", 'try "a".py.rjust(-1)'),
        ("'a'.rjust(2, '@')", 'try "a".py.rjust(2, "@")'),
        ("'abc'.rjust(10, '@')", 'try "abc".py.rjust(10, "@")'),
        ("'a'.rjust(1, '@@')", 'try "a".py.rjust(1, "@@")'),
        ("'a'.rjust(1, '')", 'try "a".py.rjust(1, "")'),
        ("''.rjust(0)", 'try "".py.rjust(0)'),
        ("''.rjust(1)", 'try "".py.rjust(1)'),
        ("''.rjust(2)", 'try "".py.rjust(2)'),
        ("''.rjust(-1)", 'try "".py.rjust(-1)'),
    )),
    ('test_rsplit', (
        ("'abc'.rsplit('a')", 'try "abc".py.rsplit("a")'),
        ("'abc'.rsplit('b')", 'try "abc".py.rsplit("b")'),
        ("'abc'.rsplit('c')", 'try "abc".py.rsplit("c")'),
        ("'abc'.rsplit('d')", 'try "abc".py.rsplit("d")'),
        ("'aaa'.rsplit('a')", 'try "aaa".py.rsplit("a")'),
        ("'ab ab '.rsplit('a')", 'try "ab ab ".py.rsplit("a")'),
        ("'ab ab '.rsplit('b')", 'try "ab ab ".py.rsplit("b")'),
        ("'ab ab '.rsplit('ab')", 'try "ab ab ".py.rsplit("ab")'),
        ("'ab ab '.rsplit('ba')", 'try "ab ab ".py.rsplit("ba")'),
        ("'ab ab '.rsplit('b a')", 'try "ab ab ".py.rsplit("b a")'),
        ("'aabb  aabb  '.rsplit('a')", 'try "aabb  aabb  ".py.rsplit("a")'),
        ("'aabb  aabb  '.rsplit('b')", 'try "aabb  aabb  ".py.rsplit("b")'),
        ("'aabb  aabb  '.rsplit(' ')", 'try "aabb  aabb  ".py.rsplit(" ")'),
        ("'aabb  aabb  '.rsplit('b  a')", 'try "aabb  aabb  ".py.rsplit("b  a")'),
        ("' ab ab '.rsplit(' ')", 'try " ab ab ".py.rsplit(" ")'),
        ("' ab ab '.rsplit('')", 'try " ab ab ".py.rsplit("")'),
        ("'a'.rsplit('')", 'try "a".py.rsplit("")'),
        ("''.rsplit('a')", 'try "".py.rsplit("a")'),
        ("''.rsplit('')", 'try "".py.rsplit("")'),
        ("'abc'.rsplit('a', 1)", 'try "abc".py.rsplit("a", 1)'),
        ("'abc'.rsplit('b', 1)", 'try "abc".py.rsplit("b", 1)'),
        ("'abc'.rsplit('c', 1)", 'try "abc".py.rsplit("c", 1)'),
        ("'abc'.rsplit('d', 1)", 'try "abc".py.rsplit("d", 1)'),
        ("'ab ab '.rsplit('a', 1)", 'try "ab ab ".py.rsplit("a", 1)'),
        ("'ab ab '.rsplit('b', 1)", 'try "ab ab ".py.rsplit("b", 1)'),
        ("'ab ab '.rsplit('ab', 1)", 'try "ab ab ".py.rsplit("ab", 1)'),
        ("'ab ab '.rsplit('ba', 1)", 'try "ab ab ".py.rsplit("ba", 1)'),
        ("'ab ab '.rsplit('b a', 1)", 'try "ab ab ".py.rsplit("b a", 1)'),
        ("'aabb  aabb  '.rsplit('a', 1)", 'try "aabb  aabb  ".py.rsplit("a", 1)'),
        ("'aabb  aabb  '.rsplit('b', 1)", 'try "aabb  aabb  ".py.rsplit("b", 1)'),
        ("'aabb  aabb  '.rsplit(' ', 1)", 'try "aabb  aabb  ".py.rsplit(" ", 1)'),
        ("'aabb  aabb  '.rsplit('b  a', 1)", 'try "aabb  aabb  ".py.rsplit("b  a", 1)'),
        ("' ab ab '.rsplit(' ', 1)", 'try " ab ab ".py.rsplit(" ", 1)'),
        ("' ab ab '.rsplit('', 1)", 'try " ab ab ".py.rsplit("", 1)'),
        ("'a'.rsplit('', 1)", 'try "a".py.rsplit("", 1)'),
        ("''.rsplit('a', 1)", 'try "".py.rsplit("a", 1)'),
        ("''.rsplit('', 1)", 'try "".py.rsplit("", 1)'),
        ("'abc'.rsplit('a', 2)", 'try "abc".py.rsplit("a", 2)'),
        ("'abc'.rsplit('b', 2)", 'try "abc".py.rsplit("b", 2)'),
        ("'abc'.rsplit('c', 2)", 'try "abc".py.rsplit("c", 2)'),
        ("'abc'.rsplit('d', 2)", 'try "abc".py.rsplit("d", 2)'),
        ("'ab ab '.rsplit('a', 2)", 'try "ab ab ".py.rsplit("a", 2)'),
        ("'ab ab '.rsplit('b', 2)", 'try "ab ab ".py.rsplit("b", 2)'),
        ("'ab ab '.rsplit('ab', 2)", 'try "ab ab ".py.rsplit("ab", 2)'),
        ("'ab ab '.rsplit('ba', 2)", 'try "ab ab ".py.rsplit("ba", 2)'),
        ("'ab ab '.rsplit('b a', 2)", 'try "ab ab ".py.rsplit("b a", 2)'),
        ("'aabb  aabb  '.rsplit('a', 2)", 'try "aabb  aabb  ".py.rsplit("a", 2)'),
        ("'aabb  aabb  '.rsplit('b', 2)", 'try "aabb  aabb  ".py.rsplit("b", 2)'),
        ("'aabb  aabb  '.rsplit(' ', 2)", 'try "aabb  aabb  ".py.rsplit(" ", 2)'),
        ("'aabb  aabb  '.rsplit('b  a', 2)", 'try "aabb  aabb  ".py.rsplit("b  a", 2)'),
        ("' ab ab '.rsplit(' ', 2)", 'try " ab ab ".py.rsplit(" ", 2)'),
        ("' ab ab '.rsplit('', 2)", 'try " ab ab ".py.rsplit("", 2)'),
        ("'a'.rsplit('', 2)", 'try "a".py.rsplit("", 2)'),
        ("''.rsplit('a', 2)", 'try "".py.rsplit("a", 2)'),
        ("''.rsplit('', 2)", 'try "".py.rsplit("", 2)'),
        ("'abc'.rsplit('b', 10)", 'try "abc".py.rsplit("b", 10)'),
        ("'abc'.rsplit('b', 0)", 'try "abc".py.rsplit("b", 0)'),
        ("'abc'.rsplit('b', -1)", 'try "abc".py.rsplit("b", -1)'),
        ("'abc'.rsplit('b', -10000)", 'try "abc".py.rsplit("b", -10000)'),
        ("'abc'.rsplit()", 'try "abc".py.rsplit()'),
        ("'ab ab '.rsplit()", 'try "ab ab ".py.rsplit()'),
        ("' ab ab '.rsplit()", 'try " ab ab ".py.rsplit()'),
        ("'aabb  aabb  '.rsplit()", 'try "aabb  aabb  ".py.rsplit()'),
        ("'a bb  ccc'.rsplit()", 'try "a bb  ccc".py.rsplit()'),
        ("' a bb  ccc'.rsplit()", 'try " a bb  ccc".py.rsplit()'),
        ("'a bb  ccc   '.rsplit()", 'try "a bb  ccc   ".py.rsplit()'),
        ("' a bb  ccc   '.rsplit()", 'try " a bb  ccc   ".py.rsplit()'),
        ("'a'.rsplit()", 'try "a".py.rsplit()'),
        ("''.rsplit()", 'try "".py.rsplit()'),
        ("'abc'.rsplit(None, 1)", 'try "abc".py.rsplit(nil, 1)'),
        ("'ab ab '.rsplit(None, 1)", 'try "ab ab ".py.rsplit(nil, 1)'),
        ("' ab ab '.rsplit(None, 1)", 'try " ab ab ".py.rsplit(nil, 1)'),
        ("'aabb  aabb  '.rsplit(None, 1)", 'try "aabb  aabb  ".py.rsplit(nil, 1)'),
        ("'a bb  ccc'.rsplit(None, 1)", 'try "a bb  ccc".py.rsplit(nil, 1)'),
        ("' a bb  ccc'.rsplit(None, 1)", 'try " a bb  ccc".py.rsplit(nil, 1)'),
        ("'a bb  ccc   '.rsplit(None, 1)", 'try "a bb  ccc   ".py.rsplit(nil, 1)'),
        ("' a bb  ccc   '.rsplit(None, 1)", 'try " a bb  ccc   ".py.rsplit(nil, 1)'),
        ("'a'.rsplit(None, 1)", 'try "a".py.rsplit(nil, 1)'),
        ("''.rsplit(None, 1)", 'try "".py.rsplit(nil, 1)'),
        ("'abc'.rsplit(None, 2)", 'try "abc".py.rsplit(nil, 2)'),
        ("'ab ab '.rsplit(None, 2)", 'try "ab ab ".py.rsplit(nil, 2)'),
        ("' ab ab '.rsplit(None, 2)", 'try " ab ab ".py.rsplit(nil, 2)'),
        ("'aabb  aabb  '.rsplit(None, 2)", 'try "aabb  aabb  ".py.rsplit(nil, 2)'),
        ("'a bb  ccc'.rsplit(None, 2)", 'try "a bb  ccc".py.rsplit(nil, 2)'),
        ("' a bb  ccc'.rsplit(None, 2)", 'try " a bb  ccc".py.rsplit(nil, 2)'),
        ("'a bb  ccc   '.rsplit(None, 2)", 'try "a bb  ccc   ".py.rsplit(nil, 2)'),
        ("' a bb  ccc   '.rsplit(None, 2)", 'try " a bb  ccc   ".py.rsplit(nil, 2)'),
        ("'a'.rsplit(None, 2)", 'try "a".py.rsplit(nil, 2)'),
        ("''.rsplit(None, 2)", 'try "".py.rsplit(nil, 2)'),
    )),
    ('test_rpartition', (
        ("'abc'.rpartition('a')", 'try "abc".py.rpartition("a")'),
        ("'abc'.rpartition('b')", 'try "abc".py.rpartition("b")'),
        ("'abc'.rpartition('c')", 'try "abc".py.rpartition("c")'),
        ("'abc'.rpartition('d')", 'try "abc".py.rpartition("d")'),
        ("'ab ab '.rpartition('a')", 'try "ab ab ".py.rpartition("a")'),
        ("'ab ab '.rpartition('b')", 'try "ab ab ".py.rpartition("b")'),
        ("'ab ab '.rpartition('ab')", 'try "ab ab ".py.rpartition("ab")'),
        ("'ab ab '.rpartition('ba')", 'try "ab ab ".py.rpartition("ba")'),
        ("'ab ab '.rpartition('b a')", 'try "ab ab ".py.rpartition("b a")'),
        ("' ab ab '.rpartition(' ')", 'try " ab ab ".py.rpartition(" ")'),
        ("' ab ab '.rpartition('')", 'try " ab ab ".py.rpartition("")'),
        ("'a'.rpartition('')", 'try "a".py.rpartition("")'),
        ("''.rpartition('a')", 'try "".py.rpartition("a")'),
        ("''.rpartition('')", 'try "".py.rpartition("")'),
    )),
    ('test_rstrip', (
        ("'ab ab'.rstrip()", '"ab ab".py.rstrip()'),
        ("'ab ab'.rstrip('a')", '"ab ab".py.rstrip("a")'),
        ("'ab ab'.rstrip('b')", '"ab ab".py.rstrip("b")'),
        ("'ab ab'.rstrip('ab')", '"ab ab".py.rstrip("ab")'),
        ("'ab ab '.rstrip('a')", '"ab ab ".py.rstrip("a")'),
        ("'ab ab '.rstrip('ab')", '"ab ab ".py.rstrip("ab")'),
        ("'ab ab '.rstrip('ba')", '"ab ab ".py.rstrip("ba")'),
        ("' ab ab'.rstrip('a')", '" ab ab".py.rstrip("a")'),
        ("' ab ab'.rstrip('ab')", '" ab ab".py.rstrip("ab")'),
        ("' ab ab'.rstrip('ba')", '" ab ab".py.rstrip("ba")'),
        ("' ab ab '.rstrip()", '" ab ab ".py.rstrip()'),
        ("' ab ab '.rstrip(' ')", '" ab ab ".py.rstrip(" ")'),
        ("' ab ab '.rstrip('')", '" ab ab ".py.rstrip("")'),
        ("'a'.rstrip('a')", '"a".py.rstrip("a")'),
        ("''.rstrip('a')", '"".py.rstrip("a")'),
        ("'a'.rstrip('')", '"a".py.rstrip("")'),
        ("''.rstrip('')", '"".py.rstrip("")'),
    )),
    ('test_split', (
        ("'abc'.split('a')", 'try "abc".py.split("a")'),
        ("'abc'.split('b')", 'try "abc".py.split("b")'),
        ("'abc'.split('c')", 'try "abc".py.split("c")'),
        ("'abc'.split('d')", 'try "abc".py.split("d")'),
        ("'aaa'.split('a')", 'try "aaa".py.split("a")'),
        ("'ab ab '.split('a')", 'try "ab ab ".py.split("a")'),
        ("'ab ab '.split('b')", 'try "ab ab ".py.split("b")'),
        ("'ab ab '.split('ab')", 'try "ab ab ".py.split("ab")'),
        ("'ab ab '.split('ba')", 'try "ab ab ".py.split("ba")'),
        ("'ab ab '.split('b a')", 'try "ab ab ".py.split("b a")'),
        ("'aabb  aabb  '.split('a')", 'try "aabb  aabb  ".py.split("a")'),
        ("'aabb  aabb  '.split('b')", 'try "aabb  aabb  ".py.split("b")'),
        ("'aabb  aabb  '.split(' ')", 'try "aabb  aabb  ".py.split(" ")'),
        ("'aabb  aabb  '.split('b  a')", 'try "aabb  aabb  ".py.split("b  a")'),
        ("' ab ab '.split(' ')", 'try " ab ab ".py.split(" ")'),
        ("' ab ab '.split('')", 'try " ab ab ".py.split("")'),
        ("'a'.split('')", 'try "a".py.split("")'),
        ("''.split('a')", 'try "".py.split("a")'),
        ("''.split('')", 'try "".py.split("")'),
        ("'abc'.split('a', 1)", 'try "abc".py.split("a", 1)'),
        ("'abc'.split('b', 1)", 'try "abc".py.split("b", 1)'),
        ("'abc'.split('c', 1)", 'try "abc".py.split("c", 1)'),
        ("'abc'.split('d', 1)", 'try "abc".py.split("d", 1)'),
        ("'ab ab '.split('a', 1)", 'try "ab ab ".py.split("a", 1)'),
        ("'ab ab '.split('b', 1)", 'try "ab ab ".py.split("b", 1)'),
        ("'ab ab '.split('ab', 1)", 'try "ab ab ".py.split("ab", 1)'),
        ("'ab ab '.split('ba', 1)", 'try "ab ab ".py.split("ba", 1)'),
        ("'ab ab '.split('b a', 1)", 'try "ab ab ".py.split("b a", 1)'),
        ("'aabb  aabb  '.split('a', 1)", 'try "aabb  aabb  ".py.split("a", 1)'),
        ("'aabb  aabb  '.split('b', 1)", 'try "aabb  aabb  ".py.split("b", 1)'),
        ("'aabb  aabb  '.split(' ', 1)", 'try "aabb  aabb  ".py.split(" ", 1)'),
        ("'aabb  aabb  '.split('b  a', 1)", 'try "aabb  aabb  ".py.split("b  a", 1)'),
        ("' ab ab '.split(' ', 1)", 'try " ab ab ".py.split(" ", 1)'),
        ("' ab ab '.split('', 1)", 'try " ab ab ".py.split("", 1)'),
        ("'a'.split('', 1)", 'try "a".py.split("", 1)'),
        ("''.split('a', 1)", 'try "".py.split("a", 1)'),
        ("''.split('', 1)", 'try "".py.split("", 1)'),
        ("'abc'.split('a', 2)", 'try "abc".py.split("a", 2)'),
        ("'abc'.split('b', 2)", 'try "abc".py.split("b", 2)'),
        ("'abc'.split('c', 2)", 'try "abc".py.split("c", 2)'),
        ("'abc'.split('d', 2)", 'try "abc".py.split("d", 2)'),
        ("'ab ab '.split('a', 2)", 'try "ab ab ".py.split("a", 2)'),
        ("'ab ab '.split('b', 2)", 'try "ab ab ".py.split("b", 2)'),
        ("'ab ab '.split('ab', 2)", 'try "ab ab ".py.split("ab", 2)'),
        ("'ab ab '.split('ba', 2)", 'try "ab ab ".py.split("ba", 2)'),
        ("'ab ab '.split('b a', 2)", 'try "ab ab ".py.split("b a", 2)'),
        ("'aabb  aabb  '.split('a', 2)", 'try "aabb  aabb  ".py.split("a", 2)'),
        ("'aabb  aabb  '.split('b', 2)", 'try "aabb  aabb  ".py.split("b", 2)'),
        ("'aabb  aabb  '.split(' ', 2)", 'try "aabb  aabb  ".py.split(" ", 2)'),
        ("'aabb  aabb  '.split('b  a', 2)", 'try "aabb  aabb  ".py.split("b  a", 2)'),
        ("' ab ab '.split(' ', 2)", 'try " ab ab ".py.split(" ", 2)'),
        ("' ab ab '.split('', 2)", 'try " ab ab ".py.split("", 2)'),
        ("'a'.split('', 2)", 'try "a".py.split("", 2)'),
        ("''.split('a', 2)", 'try "".py.split("a", 2)'),
        ("''.split('', 2)", 'try "".py.split("", 2)'),
        ("'abc'.split('b', 10)", 'try "abc".py.split("b", 10)'),
        ("'abc'.split('b', 0)", 'try "abc".py.split("b", 0)'),
        ("'abc'.split('b', -1)", 'try "abc".py.split("b", -1)'),
        ("'abc'.split('b', -10000)", 'try "abc".py.split("b", -10000)'),
        ("'abc'.split()", 'try "abc".py.split()'),
        ("'ab ab '.split()", 'try "ab ab ".py.split()'),
        ("' ab ab '.split()", 'try " ab ab ".py.split()'),
        ("'aabb  aabb  '.split()", 'try "aabb  aabb  ".py.split()'),
        ("'a bb  ccc'.split()", 'try "a bb  ccc".py.split()'),
        ("' a bb  ccc'.split()", 'try " a bb  ccc".py.split()'),
        ("'a bb  ccc   '.split()", 'try "a bb  ccc   ".py.split()'),
        ("' a bb  ccc   '.split()", 'try " a bb  ccc   ".py.split()'),
        ("'a'.split()", 'try "a".py.split()'),
        ("''.split()", 'try "".py.split()'),
        ("'abc'.split(None, 1)", 'try "abc".py.split(nil, 1)'),
        ("'ab ab '.split(None, 1)", 'try "ab ab ".py.split(nil, 1)'),
        ("' ab ab '.split(None, 1)", 'try " ab ab ".py.split(nil, 1)'),
        ("'aabb  aabb  '.split(None, 1)", 'try "aabb  aabb  ".py.split(nil, 1)'),
        ("'a bb  ccc'.split(None, 1)", 'try "a bb  ccc".py.split(nil, 1)'),
        ("' a bb  ccc'.split(None, 1)", 'try " a bb  ccc".py.split(nil, 1)'),
        ("'a bb  ccc   '.split(None, 1)", 'try "a bb  ccc   ".py.split(nil, 1)'),
        ("' a bb  ccc   '.split(None, 1)", 'try " a bb  ccc   ".py.split(nil, 1)'),
        ("'a'.split(None, 1)", 'try "a".py.split(nil, 1)'),
        ("''.split(None, 1)", 'try "".py.split(nil, 1)'),
        ("'abc'.split(None, 2)", 'try "abc".py.split(nil, 2)'),
        ("'ab ab '.split(None, 2)", 'try "ab ab ".py.split(nil, 2)'),
        ("' ab ab '.split(None, 2)", 'try " ab ab ".py.split(nil, 2)'),
        ("'aabb  aabb  '.split(None, 2)", 'try "aabb  aabb  ".py.split(nil, 2)'),
        ("'a bb  ccc'.split(None, 2)", 'try "a bb  ccc".py.split(nil, 2)'),
        ("' a bb  ccc'.split(None, 2)", 'try " a bb  ccc".py.split(nil, 2)'),
        ("'a bb  ccc   '.split(None, 2)", 'try "a bb  ccc   ".py.split(nil, 2)'),
        ("' a bb  ccc   '.split(None, 2)", 'try " a bb  ccc   ".py.split(nil, 2)'),
        ("'a'.split(None, 2)", 'try "a".py.split(nil, 2)'),
        ("''.split(None, 2)", 'try "".py.split(nil, 2)'),
    )),
    ('test_splitlines', (
        ("'abc'.splitlines()", '"abc".py.splitlines()'),
        ("'a\\rbc'.splitlines()", '"a\\rbc".py.splitlines()'),
        ("'a\\nbc'.splitlines()", '"a\\nbc".py.splitlines()'),
        ("'a\\rb\\rc'.splitlines()", '"a\\rb\\rc".py.splitlines()'),
        ("'a\\nb\\nc'.splitlines()", '"a\\nb\\nc".py.splitlines()'),
        ("'a\\r\\nbc'.splitlines()", '"a\\r\\nbc".py.splitlines()'),
        ("'a\\n\\rbc'.splitlines()", '"a\\n\\rbc".py.splitlines()'),
        ("'\\r\\r\\r\\r'.splitlines()", '"\\r\\r\\r\\r".py.splitlines()'),
        ("'\\n\\n\\n\\n'.splitlines()", '"\\n\\n\\n\\n".py.splitlines()'),
        ("'\\r\\n\\r\\n'.splitlines()", '"\\r\\n\\r\\n".py.splitlines()'),
        ("'\\r\\ra\\r\\r'.splitlines()", '"\\r\\ra\\r\\r".py.splitlines()'),
        ("'\\n\\na\\n\\n'.splitlines()", '"\\n\\na\\n\\n".py.splitlines()'),
        ("'\\r\\na\\r\\n'.splitlines()", '"\\r\\na\\r\\n".py.splitlines()'),
        ("'\\r\\ra\\r\\nbc\\n'.splitlines()", '"\\r\\ra\\r\\nbc\\n".py.splitlines()'),
        ("'\\n\\na\\r\\nbc\\r'.splitlines()", '"\\n\\na\\r\\nbc\\r".py.splitlines()'),
        ("'\\r\\na\\r\\nbc\\r\\n'.splitlines()", '"\\r\\na\\r\\nbc\\r\\n".py.splitlines()'),
        ("''.splitlines()", '"".py.splitlines()'),
        ("'abc'.splitlines(True)", '"abc".py.splitlines(true)'),
        ("'a\\rbc'.splitlines(True)", '"a\\rbc".py.splitlines(true)'),
        ("'a\\nbc'.splitlines(True)", '"a\\nbc".py.splitlines(true)'),
        ("'a\\r\\nbc'.splitlines(True)", '"a\\r\\nbc".py.splitlines(true)'),
        ("'a\\n\\rbc'.splitlines(True)", '"a\\n\\rbc".py.splitlines(true)'),
        ("'\\r\\r\\r\\r'.splitlines(True)", '"\\r\\r\\r\\r".py.splitlines(true)'),
        ("'\\n\\n\\n\\n'.splitlines(True)", '"\\n\\n\\n\\n".py.splitlines(true)'),
        ("'\\r\\n\\r\\n'.splitlines(True)", '"\\r\\n\\r\\n".py.splitlines(true)'),
        ("'\\r\\ra\\r\\r'.splitlines(True)", '"\\r\\ra\\r\\r".py.splitlines(true)'),
        ("'\\n\\na\\n\\n'.splitlines(True)", '"\\n\\na\\n\\n".py.splitlines(true)'),
        ("'\\r\\na\\r\\n'.splitlines(True)", '"\\r\\na\\r\\n".py.splitlines(true)'),
        ("'\\r\\ra\\r\\nbc\\n'.splitlines(True)", '"\\r\\ra\\r\\nbc\\n".py.splitlines(true)'),
        ("'\\n\\na\\r\\nbc\\r'.splitlines(True)", '"\\n\\na\\r\\nbc\\r".py.splitlines(true)'),
        ("'\\r\\na\\r\\nbc\\r\\n'.splitlines(True)", '"\\r\\na\\r\\nbc\\r\\n".py.splitlines(true)'),
        ("''.splitlines(True)", '"".py.splitlines(true)'),
    )),
    ('test_startswith_single_prefix', (
        ("'a'.startswith('a')", '"a".py.startswith("a")'),
        ("'abc'.startswith('a')", '"abc".py.startswith("a")'),
        ("'abc'.startswith('c')", '"abc".py.startswith("c")'),
        ("'abcab'.startswith('ab')", '"abcab".py.startswith("ab")'),
        ("'abcab'.startswith('ac')", '"abcab".py.startswith("ac")'),
        ("''.startswith('a')", '"".py.startswith("a")'),
        ("'a'.startswith('')", '"a".py.startswith("")'),
        ("''.startswith('')", '"".py.startswith("")'),
        ("'abcab'.startswith('a', 1, 3)", '"abcab".py.startswith("a", 1, 3)'),
        ("'abcab'.startswith('a', 1, 4)", '"abcab".py.startswith("a", 1, 4)'),
        ("'abcab'.startswith('ab', 1, 3)", '"abcab".py.startswith("ab", 1, 3)'),
        ("'abcab'.startswith('ab', 1, 4)", '"abcab".py.startswith("ab", 1, 4)'),
        ("'abcab'.startswith('a', 1)", '"abcab".py.startswith("a", 1)'),
        ("'abcab'.startswith('a', 4)", '"abcab".py.startswith("a", 4)'),
        ("'abcab'.startswith('a', 3, 1)", '"abcab".py.startswith("a", 3, 1)'),
        ("'abcab'.startswith('', 1, 3)", '"abcab".py.startswith("", 1, 3)'),
        ("'abc'.startswith('a', -3, 0)", '"abc".py.startswith("a", -3, 0)'),
        ("'abc'.startswith('a', -2, -1)", '"abc".py.startswith("a", -2, -1)'),
        ("'abc'.startswith('b', -2, -1)", '"abc".py.startswith("b", -2, -1)'),
        ("'abcab'.startswith('ab', 0, 999)", '"abcab".py.startswith("ab", 0, 999)'),
        ("'abcab'.startswith('ab', 999)", '"abcab".py.startswith("ab", 999)'),
    )),
    ('test_startswith_multiple_prefixes', (
        ("'a'.startswith(('a',))", '"a".py.startswith(["a"])'),
        ("'abc'.startswith(('a',))", '"abc".py.startswith(["a"])'),
        ("'abc'.startswith(('c',))", '"abc".py.startswith(["c"])'),
        ("'abc'.startswith(('b', 'c'))", '"abc".py.startswith(["b", "c"])'),
        ("'abc'.startswith(('b', 'a'))", '"abc".py.startswith(["b", "a"])'),
        ("'abc'.startswith(('ab', 'bc', 'abc'))", '"abc".py.startswith(["ab", "bc", "abc"])'),
        ("'abc'.startswith(('bc', 'ca', 'cba'))", '"abc".py.startswith(["bc", "ca", "cba"])'),
        ("''.startswith(('a',))", '"".py.startswith(["a"])'),
        ("'a'.startswith(('',))", '"a".py.startswith([""])'),
        ("''.startswith(('',))", '"".py.startswith([""])'),
        ("'a'.startswith(tuple())", '"a".py.startswith([])'),
        ("''.startswith(tuple())", '"".py.startswith([])'),
    )),
    ('test_strip', (
        ("'ab ab'.strip()", '"ab ab".py.strip()'),
        ("'ab ab'.strip('a')", '"ab ab".py.strip("a")'),
        ("'ab ab'.strip('b')", '"ab ab".py.strip("b")'),
        ("'ab ab'.strip('ab')", '"ab ab".py.strip("ab")'),
        ("'ab ab '.strip('a')", '"ab ab ".py.strip("a")'),
        ("'ab ab '.strip('ab')", '"ab ab ".py.strip("ab")'),
        ("'ab ab '.strip('ba')", '"ab ab ".py.strip("ba")'),
        ("' ab ab'.strip('a')", '" ab ab".py.strip("a")'),
        ("' ab ab'.strip('ab')", '" ab ab".py.strip("ab")'),
        ("' ab ab'.strip('ba')", '" ab ab".py.strip("ba")'),
        ("' ab ab '.strip()", '" ab ab ".py.strip()'),
        ("' ab ab '.strip(' ')", '" ab ab ".py.strip(" ")'),
        ("' ab ab '.strip('')", '" ab ab ".py.strip("")'),
        ("'a'.strip('a')", '"a".py.strip("a")'),
        ("''.strip('a')", '"".py.strip("a")'),
        ("'a'.strip('')", '"a".py.strip("")'),
        ("''.strip('')", '"".py.strip("")'),
    )),
    ('test_swapcase', (
        ("'a'.swapcase()", '"a".py.swapcase()'),
        ("'Ab'.swapcase()", '"Ab".py.swapcase()'),
        ("'abc'.swapcase()", '"abc".py.swapcase()'),
        ("'aBc'.swapcase()", '"aBc".py.swapcase()'),
        ("'a c'.swapcase()", '"a c".py.swapcase()'),
        ("'3'.swapcase()", '"3".py.swapcase()'),
        ("'3F'.swapcase()", '"3F".py.swapcase()'),
        ("'3f'.swapcase()", '"3f".py.swapcase()'),
        ("''.swapcase()", '"".py.swapcase()'),
        ("'@'.swapcase()", '"@".py.swapcase()'),
        ("' '.swapcase()", '" ".py.swapcase()'),
        ("'3F@'.swapcase()", '"3F@".py.swapcase()'),
        ("'\\n'.swapcase()", '"\\n".py.swapcase()'),
    )),
    ('test_title', (
        ("'a'.title()", '"a".py.title()'),
        ("'aaa'.title()", '"aaa".py.title()'),
        ("'aAa'.title()", '"aAa".py.title()'),
        ("'Aaa'.title()", '"Aaa".py.title()'),
        ("'aAa AAA aaA'.title()", '"aAa AAA aaA".py.title()'),
        ("'AAa AAA AaA'.title()", '"AAa AAA AaA".py.title()'),
        ("'Aaa Bbb Ccc'.title()", '"Aaa Bbb Ccc".py.title()'),
        ("'aAa\\naaA'.title()", '"aAa\\naaA".py.title()'),
        ("'aAa0aaA'.title()", '"aAa0aaA".py.title()'),
        ("'aAa-aaA'.title()", '"aAa-aaA".py.title()'),
        ("'aAa/aaA'.title()", '"aAa/aaA".py.title()'),
        ("'aAa\\'aaA'.title()", '"aAa\'aaA".py.title()'),
        ("'AAa-AaA'.title()", '"AAa-AaA".py.title()'),
        ("'Aaa-Abc'.title()", '"Aaa-Abc".py.title()'),
        ("' aA a '.title()", '" aA a ".py.title()'),
        ("' Aa A '.title()", '" Aa A ".py.title()'),
        ("' Aa  '.title()", '" Aa  ".py.title()'),
        ("'   Aaa Aaa'.title()", '"   Aaa Aaa".py.title()'),
        ("'   AaA Aaa'.title()", '"   AaA Aaa".py.title()'),
        ("'Aaa @@@ Aaa'.title()", '"Aaa @@@ Aaa".py.title()'),
        ("'Aaa @@@ Aaa@@@'.title()", '"Aaa @@@ Aaa@@@".py.title()'),
        ("'Aaa @@@@Aaa@@@'.title()", '"Aaa @@@@Aaa@@@".py.title()'),
        ("''.title()", '"".py.title()'),
    )),
    ('test_upper', (
        ("'a'.upper()", '"a".py.upper()'),
        ("'Ab'.upper()", '"Ab".py.upper()'),
        ("'abc'.upper()", '"abc".py.upper()'),
        ("'aBc'.upper()", '"aBc".py.upper()'),
        ("'a c'.upper()", '"a c".py.upper()'),
        ("'3'.upper()", '"3".py.upper()'),
        ("'3F'.upper()", '"3F".py.upper()'),
        ("'3f'.upper()", '"3f".py.upper()'),
        ("''.upper()", '"".py.upper()'),
        ("'@'.upper()", '"@".py.upper()'),
        ("' '.upper()", '" ".py.upper()'),
        ("'3F@'.upper()", '"3F@".py.upper()'),
        ("'\\n'.upper()", '"\\n".py.upper()'),
    )),
    ('test_zfill', (
        ("'1'.zfill(5)", '"1".py.zfill(5)'),
        ("'-1'.zfill(5)", '"-1".py.zfill(5)'),
        ("'+1'.zfill(5)", '"+1".py.zfill(5)'),
        ("'a'.zfill(5)", '"a".py.zfill(5)'),
        ("'-a'.zfill(5)", '"-a".py.zfill(5)'),
        ("'+a'.zfill(5)", '"+a".py.zfill(5)'),
        ("'100'.zfill(5)", '"100".py.zfill(5)'),
        ("'-100'.zfill(5)", '"-100".py.zfill(5)'),
        ("'+100'.zfill(5)", '"+100".py.zfill(5)'),
        ("'1000'.zfill(5)", '"1000".py.zfill(5)'),
        ("'-1000'.zfill(5)", '"-1000".py.zfill(5)'),
        ("'+1000'.zfill(5)", '"+1000".py.zfill(5)'),
        ("'10000'.zfill(5)", '"10000".py.zfill(5)'),
        ("'-10000'.zfill(5)", '"-10000".py.zfill(5)'),
        ("'+10000'.zfill(5)", '"+10000".py.zfill(5)'),
        ("'--1'.zfill(5)", '"--1".py.zfill(5)'),
        ("'++1'.zfill(5)", '"++1".py.zfill(5)'),
        ("'-+1'.zfill(5)", '"-+1".py.zfill(5)'),
        ("'+-1'.zfill(5)", '"+-1".py.zfill(5)'),
        ("'-1-'.zfill(5)", '"-1-".py.zfill(5)'),
        ("'+1+'.zfill(5)", '"+1+".py.zfill(5)'),
        ("'----'.zfill(5)", '"----".py.zfill(5)'),
        ("'++++'.zfill(5)", '"++++".py.zfill(5)'),
        ("'123'.zfill(0)", '"123".py.zfill(0)'),
        ("'123'.zfill(-1)", '"123".py.zfill(-1)'),
        ("'123'.zfill(-100)", '"123".py.zfill(-100)'),
        ("'1'.zfill(-1)", '"1".py.zfill(-1)'),
        ("'-'.zfill(-1)", '"-".py.zfill(-1)'),
        ("'+'.zfill(-1)", '"+".py.zfill(-1)'),
        ("'1'.zfill(0)", '"1".py.zfill(0)'),
        ("'-'.zfill(0)", '"-".py.zfill(0)'),
        ("'+'.zfill(0)", '"+".py.zfill(0)'),
        ("'1'.zfill(1)", '"1".py.zfill(1)'),
        ("'-'.zfill(1)", '"-".py.zfill(1)'),
        ("'+'.zfill(1)", '"+".py.zfill(1)'),
        ("'1'.zfill(2)", '"1".py.zfill(2)'),
        ("'-'.zfill(2)", '"-".py.zfill(2)'),
        ("'+'.zfill(2)", '"+".py.zfill(2)'),
        ("''.zfill(5)", '"".py.zfill(5)'),
        ("''.zfill(0)", '"".py.zfill(0)'),
        ("''.zfill(-1)", '"".py.zfill(-1)'),
        ("''.zfill(-100)", '"".py.zfill(-100)'),
    )),
))


def create_case_footer():
    """Create footer."""
    return '\n'.join((
        '    },',
        '',
    ))


def esc_and_quotation(src):
    """Do escape and add quotations."""
    return ''.join((
        '"',
        (src
         .replace('\\', '\\\\')
         .replace('"', '\\"')
         .replace('\n', '\\n')
         .replace('\r', '\\r')
         .replace('\t', '\\t')),
        '"'
    ))


def create_expect(test):
    """Create text of expected result."""
    try:
        ret = eval(test[0])

        if isinstance(ret, bool):
            ret = str(ret).lower()
        elif isinstance(ret, str):
            ret = 'String(' + esc_and_quotation(ret) + ')'
        elif (isinstance(ret, (list, tuple)) and
              all(isinstance(r, str) for r in ret)):
            ret = '[{0}]'.format(
                ', '.join(map(esc_and_quotation, ret))
            )
        return '        XCTAssertEqual({0}, {1})'.format(ret, test[1])
    except (IndexError, ValueError, TypeError):
        return '        XCTAssertThrowsError({0})'.format(test[1])


def create_source():
    """Create source file text."""
    # yield header
    yield """\
import XCTest
@testable import Pystr

final class PystrTests: XCTestCase {"""

    # yield each test texts
    for name, tests in TEST_MAP.items():
        yield """    func {0}() {{""".format(name)
        yield '\n'.join(create_expect(test) for test in tests)
        yield """    }"""
        yield """"""

    # yeild allTests
    yield """    static var allTests = ["""
    for name in TEST_MAP:
        yield """        ("{0}", {0}),""".format(name)
    yield """\
    ]
}
"""


def main():
    """Create PystrTests.swift file."""
    with open('PystrTests.swift', 'w') as file:
        file.write('\n'.join(create_source()))


if __name__ == '__main__':
    main()
